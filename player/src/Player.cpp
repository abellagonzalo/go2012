/**
 * \mainpage
 * \section Author
 * @author fmartin
 *
 * \section Copyright
 * Version : $Id$
 *
 * \section Description
 *
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#ifndef _WIN32
#include <signal.h>
#endif

#include "alcore/altypes.h"
#include "altools/alxplatform.h"
#include "Player.h"
#include "alcore/alptr.h"
#include "alcommon/albroker.h"
#include "alcommon/almodule.h"
#include "alcommon/albrokermanager.h"
#include "alcommon/altoolsmain.h"

using namespace std;
using namespace AL;

//<EXE_INCLUDE> don't remove this comment
#include "Coach.h"

//</EXE_INCLUDE> don't remove this comment

//<ODECLAREINSTANCE> don't remove this comment

//</ODECLAREINSTANCE> don't remove this comment


#ifndef PLAYER_IS_REMOTE

#ifdef _WIN32
#define ALCALL __declspec(dllexport)
#else
#define ALCALL
#endif
#else
#define ALCALL
#endif

#ifdef __cplusplus
extern "C"
{
#endif


	ALCALL int _createModule( ALPtr<ALBroker> pBroker )
	{
		// init broker with the main broker inctance
		// from the parent executable
		ALBrokerManager::setInstance(pBroker->fBrokerManager.lock());
		ALBrokerManager::getInstance()->addBroker(pBroker);


		// create modules instance
		//<OGETINSTANCE> don't remove this comment
		ALModule::createModule<Coach>(pBroker,"Coach" );

		//</OGETINSTANCE> don't remove this comment

		return 0;
	}

	ALCALL int _closeModule(  )
	{
		// Delete module instance
		//<OKILLINSTANCE> don't remove this comment

		//</OKILLINSTANCE> don't remove this comment

		return 0;
	}

# ifdef __cplusplus
}
# endif

#ifdef PLAYER_IS_REMOTE

int main(int argc, char *argv[] )
{
	// pointer on createModule
	TMainType sig;
	sig = &_createModule;

	// call main
	ALTools::mainFunction("player",argc, argv,sig);
}

#endif
