/*
 * ConnectionPanel.java
 *
 * Created on 28-oct-2009, 0:14:20
 */
package jmanager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author paco
 */
public class ConnectionPanel extends javax.swing.JPanel {

	public Robot[] robots = new Robot[4];
	private Robot selected = null;
	private String[] robotIds = new String[4];
	private final int PORT = 6000;
	public String robotIP = "";
	private static boolean avisoMostrado = false;

	private final String ROBOTS_IP_CONF_FILE = System.getProperty("user.dir") + "/conf/robots.conf";
	

	/** Creates new form ConnectionPanel */
	public ConnectionPanel() {
		initComponents();
		LoadConfFile();

		for (int i = 0; i < 4; i++) {
			robots[i] = new Robot();
			robotIds[i] = new String("Robot " + (i + 1));
		}
	}

	private void LoadConfFile() {

		File file = new File(ROBOTS_IP_CONF_FILE);

		try {
			BufferedReader bis = new BufferedReader(new FileReader(file));

			robot1IPText.setText(bis.readLine());
			robot2IPText.setText(bis.readLine());
			robot3IPText.setText(bis.readLine());
			robot4IPText.setText(bis.readLine());

			robot1PortText.setText(bis.readLine());
			robot2PortText.setText(bis.readLine());
			robot3PortText.setText(bis.readLine());
			robot4PortText.setText(bis.readLine());

			bis.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void WriteConfFile() {
		try {
			Writer bos = new BufferedWriter(new FileWriter(new File(ROBOTS_IP_CONF_FILE)));

			bos.write((new String(robot1IPText.getText() + "\n")));
			bos.write((new String(robot2IPText.getText() + "\n")));
			bos.write((new String(robot3IPText.getText() + "\n")));
			bos.write((new String(robot4IPText.getText() + "\n")));

			bos.write((new String(robot1PortText.getText() + "\n")));
			bos.write((new String(robot2PortText.getText() + "\n")));
			bos.write((new String(robot3PortText.getText() + "\n")));
			bos.write((new String(robot4PortText.getText() + "\n")));

			bos.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        robot1ConnectionCheck = new javax.swing.JCheckBox();
        robot1IPText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        robot2ConnectionCheck = new javax.swing.JCheckBox();
        robot3ConnectionCheck = new javax.swing.JCheckBox();
        robot4ConnectionCheck = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        robot2IPText = new javax.swing.JTextField();
        robot3IPText = new javax.swing.JTextField();
        robot4IPText = new javax.swing.JTextField();
        SelectedRobotComboBox = new javax.swing.JComboBox();
        robot1PortText = new javax.swing.JTextField();
        robot2PortText = new javax.swing.JTextField();
        robot3PortText = new javax.swing.JTextField();
        robot4PortText = new javax.swing.JTextField();

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(388, 293));

        robot1ConnectionCheck.setName("robot1ConnectionCheck"); // NOI18N
        robot1ConnectionCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                robot1ConnectionCheckMouseClicked(evt);
            }
        });

        robot1IPText.setName("robot1IPText"); // NOI18N
        robot1IPText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot1IPTextActionPerformed(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ConnectionPanel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        robot2ConnectionCheck.setName("robot2ConnectionCheck"); // NOI18N
        robot2ConnectionCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                robot2ConnectionCheckMouseClicked(evt);
            }
        });

        robot3ConnectionCheck.setName("robot3ConnectionCheck"); // NOI18N
        robot3ConnectionCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                robot3ConnectionCheckMouseClicked(evt);
            }
        });

        robot4ConnectionCheck.setName("robot4ConnectionCheck"); // NOI18N
        robot4ConnectionCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                robot4ConnectionCheckMouseClicked(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        robot2IPText.setName("robot2IPText"); // NOI18N
        robot2IPText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot2IPTextActionPerformed(evt);
            }
        });

        robot3IPText.setName("robot3IPText"); // NOI18N
        robot3IPText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot3IPTextActionPerformed(evt);
            }
        });

        robot4IPText.setName("robot4IPText"); // NOI18N
        robot4IPText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot4IPTextActionPerformed(evt);
            }
        });

        SelectedRobotComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No robot connected" }));
        SelectedRobotComboBox.setName("SelectedRobotComboBox"); // NOI18N
        SelectedRobotComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedRobotComboBoxActionPerformed(evt);
            }
        });

        robot1PortText.setText(resourceMap.getString("robot1PortText.text")); // NOI18N
        robot1PortText.setName("robot1PortText"); // NOI18N
        robot1PortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot1PortTextActionPerformed(evt);
            }
        });

        robot2PortText.setText(resourceMap.getString("robot2PortText.text")); // NOI18N
        robot2PortText.setName("robot2PortText"); // NOI18N
        robot2PortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot2PortTextActionPerformed(evt);
            }
        });

        robot3PortText.setText(resourceMap.getString("robot3PortText.text")); // NOI18N
        robot3PortText.setName("robot3PortText"); // NOI18N
        robot3PortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot3PortTextActionPerformed(evt);
            }
        });

        robot4PortText.setText(resourceMap.getString("robot4PortText.text")); // NOI18N
        robot4PortText.setName("robot4PortText"); // NOI18N
        robot4PortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot4PortTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(SelectedRobotComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(robot3ConnectionCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(robot3IPText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(robot4ConnectionCheck)
                                .addGap(12, 12, 12)
                                .addComponent(robot4IPText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(robot2ConnectionCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(robot2IPText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(robot1ConnectionCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(robot1IPText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(robot1PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(robot2PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(robot3PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(robot4PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(robot1IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(robot1PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(robot1ConnectionCheck)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(robot2ConnectionCheck)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(robot2IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(robot2PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(robot3ConnectionCheck)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(robot3IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(robot3PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(robot4IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(robot4PortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(robot4ConnectionCheck))
                .addGap(18, 18, 18)
                .addComponent(SelectedRobotComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void robot1ConnectionCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_robot1ConnectionCheckMouseClicked
		RefillRobotsCB();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[0].getConnection().connect(robot1IPText.getText(), Integer.parseInt(robot1PortText.getText()));
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}
    }//GEN-LAST:event_robot1ConnectionCheckMouseClicked

    private void robot2ConnectionCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_robot2ConnectionCheckMouseClicked
		RefillRobotsCB();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[1].getConnection().connect(robot2IPText.getText(), Integer.parseInt(robot2PortText.getText()));
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot2ConnectionCheckMouseClicked

    private void robot3ConnectionCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_robot3ConnectionCheckMouseClicked
		RefillRobotsCB();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[2].getConnection().connect(robot3IPText.getText(), Integer.parseInt(robot3PortText.getText()));
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot3ConnectionCheckMouseClicked

    private void robot4ConnectionCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_robot4ConnectionCheckMouseClicked
		RefillRobotsCB();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[3].getConnection().connect(robot4IPText.getText(), Integer.parseInt(robot4PortText.getText()));
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot4ConnectionCheckMouseClicked

    private void robot1IPTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot1IPTextActionPerformed
		WriteConfFile();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[0].getConnection().connect(robot1IPText.getText(), Integer.parseInt(robot1PortText.getText()));
                robotIP = robot1IPText.getText();
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}
    }//GEN-LAST:event_robot1IPTextActionPerformed

    private void robot2IPTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot2IPTextActionPerformed
		WriteConfFile();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[1].getConnection().connect(robot2IPText.getText(), Integer.parseInt(robot2PortText.getText()));
                robotIP = robot1IPText.getText();
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot2IPTextActionPerformed

    private void robot3IPTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot3IPTextActionPerformed
		WriteConfFile();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[2].getConnection().connect(robot3IPText.getText(), Integer.parseInt(robot3PortText.getText()));
                robotIP = robot1IPText.getText();
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot3IPTextActionPerformed

    private void robot4IPTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot4IPTextActionPerformed
		WriteConfFile();
		if (robot1ConnectionCheck.isSelected()) {
            try {
                updateHosts();
                robots[3].getConnection().connect(robot4IPText.getText(), Integer.parseInt(robot4PortText.getText()));
                robotIP = robot1IPText.getText();
            } catch (Exception ex) {
                Logger.getLogger(ConnectionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
		}

    }//GEN-LAST:event_robot4IPTextActionPerformed

    private void SelectedRobotComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedRobotComboBoxActionPerformed
		if ((SelectedRobotComboBox.getItemCount() > 0) && selected != null) {
			selected = robots[SelectedRobotComboBox.getSelectedIndex()];
		}
    }//GEN-LAST:event_SelectedRobotComboBoxActionPerformed

    private void robot1PortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot1PortTextActionPerformed
		WriteConfFile();
    }//GEN-LAST:event_robot1PortTextActionPerformed

    private void robot2PortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot2PortTextActionPerformed
		WriteConfFile();
    }//GEN-LAST:event_robot2PortTextActionPerformed

    private void robot3PortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot3PortTextActionPerformed
		WriteConfFile();
    }//GEN-LAST:event_robot3PortTextActionPerformed

    private void robot4PortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot4PortTextActionPerformed
		WriteConfFile();
    }//GEN-LAST:event_robot4PortTextActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox SelectedRobotComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox robot1ConnectionCheck;
    private javax.swing.JTextField robot1IPText;
    private javax.swing.JTextField robot1PortText;
    private javax.swing.JCheckBox robot2ConnectionCheck;
    private javax.swing.JTextField robot2IPText;
    private javax.swing.JTextField robot2PortText;
    private javax.swing.JCheckBox robot3ConnectionCheck;
    private javax.swing.JTextField robot3IPText;
    private javax.swing.JTextField robot3PortText;
    private javax.swing.JCheckBox robot4ConnectionCheck;
    private javax.swing.JTextField robot4IPText;
    private javax.swing.JTextField robot4PortText;
    // End of variables declaration//GEN-END:variables

	private void RefillRobotsCB() {

		boolean any = false;

		SelectedRobotComboBox.removeAllItems();

		if (robot1ConnectionCheck.isSelected()) {
			SelectedRobotComboBox.addItem(robotIds[0]);
			any = true;
		}
		if (robot2ConnectionCheck.isSelected()) {
			SelectedRobotComboBox.addItem(robotIds[1]);
			any = true;
		}
		if (robot3ConnectionCheck.isSelected()) {
			SelectedRobotComboBox.addItem(robotIds[2]);
			any = true;
		}
		if (robot4ConnectionCheck.isSelected()) {
			SelectedRobotComboBox.addItem(robotIds[3]);
			any = true;
		}

		if (!any) {
			SelectedRobotComboBox.addItem(new String("No robot connected"));
			selected = null;
		} else {
			selected = robots[SelectedRobotComboBox.getSelectedIndex()];
		}
	}

	public Connection getConnection() {
		Connection conex = null;
		try {
			conex = selected.getConnection();
		} catch (Exception ex) {

			//Para que el aviso no salga si estamos en modo edición gráfica en el NetBeans.
			//La ventana principal (JmanagerView) sólo se instancia cuando se ejecuta la aplicación.
			if (JmanagerView.class.isInstance(JmanagerView.root) && !avisoMostrado) {
				JOptionPane.showMessageDialog(null, "No hay una conexión establecida", "ERROR", JOptionPane.ERROR_MESSAGE);
				avisoMostrado = true; //Sólo sale una vez y así no molesta continuamente.
			}

			//TODO: todos los métodos que llaman a este "getConnection()",
			//deberían usar try...catch para recoger la excepción que este método lance:
			
			//throw ex;
		}
		return conex;
	}

        public Robot[] getRobots() {
            updateHosts();
            return robots;
        }

	public void updateHosts() {
		robots[0].getConnection().currentHost = robot1IPText.getText();
		robots[1].getConnection().currentHost = robot2IPText.getText();
		robots[2].getConnection().currentHost = robot3IPText.getText();
		robots[3].getConnection().currentHost = robot4IPText.getText();
	}
}
