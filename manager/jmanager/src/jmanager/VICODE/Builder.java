/*
 * Builder.java
 *
 * Created on 08-dic-2009, 19:20:50
 */
package jmanager.VICODE;

import jmanager.VICODE.xmlparsers.Loader;
import edu.umd.cs.piccolo.PNode;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import javax.swing.JCheckBox;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.xml.sax.SAXException;

/**
 *
 * @author paco
 */
public class Builder extends javax.swing.JPanel {

	private File lastDir = null;
	private File lastFile = null;
	private FileWatcher taskXML = null;
	private FileWatcher taskHPP = null;
	private FileWatcher taskCPP = null;
	private Timer timer = null;
	private String componentId = null;
	private static Builder instance;

	private final static String PATH_TO_COMPONENTS = "/../../player/src/Components";
	public final static String WORKING_DIRECTORY = System.getProperty("user.dir");

	/** Creates new form Builder */
	public Builder() {
		//Ojo con poner esta l√≠nea antes de iniciar el resto de componentes.
		instance = this;

		initComponents();

		componentNameLabel.setText("");

		//Tras haber creado todos los componentes de Builder, hace visible el estado inicial.
		hFSMBuilderGUI.getInitialState().setVisible(true);
	}

	public static Builder getInstance() {
		return instance;
	}

	public JCheckBox getHoldCheckBox() {
		return holdCheckBox;
	}

	public void unselectAllToggleButtons() {
		newComponentTB.setSelected(false);
		newStateTB.setSelected(false);
		newConnectionTB.setSelected(false);
		newTransitionTB.setSelected(false);
		eraseComponentTB.setSelected(false);
		eraseConnectionTB.setSelected(false);
		eraseStateTB.setSelected(false);
		eraseTransitionTB.setSelected(false);
	}

	public JScrollPane getJScrollPane1() {
		return jScrollPane1;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        hFSMBuilderGUI = new jmanager.VICODE.BuilderGUI();
        jToolBar1 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        quickSaveButton = new javax.swing.JButton();
        quickLoadButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        saveImageButton = new javax.swing.JButton();
        componentNameLabel = new javax.swing.JLabel();
        holdCheckBox = new javax.swing.JCheckBox();
        buildButtonsPanel = new javax.swing.JPanel();
        newStateTB = new javax.swing.JToggleButton();
        eraseStateTB = new javax.swing.JToggleButton();
        eraseTransitionTB = new javax.swing.JToggleButton();
        newTransitionTB = new javax.swing.JToggleButton();
        newComponentTB = new javax.swing.JToggleButton();
        eraseComponentTB = new javax.swing.JToggleButton();
        newConnectionTB = new javax.swing.JToggleButton();
        eraseConnectionTB = new javax.swing.JToggleButton();
        autoRestartCB = new javax.swing.JCheckBox();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Builder.class);
        setToolTipText(resourceMap.getString("Form.toolTipText")); // NOI18N
        setMinimumSize(new java.awt.Dimension(640, 480));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 480));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(null);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(1024, 610));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(500, 610));
        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(830, 610));

        hFSMBuilderGUI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        hFSMBuilderGUI.setMaximumSize(new java.awt.Dimension(3000, 3000));
        hFSMBuilderGUI.setMinimumSize(new java.awt.Dimension(830, 610));
        hFSMBuilderGUI.setName("hFSMBuilderGUI"); // NOI18N
        hFSMBuilderGUI.setPreferredSize(new java.awt.Dimension(1009, 683));

        javax.swing.GroupLayout hFSMBuilderGUILayout = new javax.swing.GroupLayout(hFSMBuilderGUI);
        hFSMBuilderGUI.setLayout(hFSMBuilderGUILayout);
        hFSMBuilderGUILayout.setHorizontalGroup(
            hFSMBuilderGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1007, Short.MAX_VALUE)
        );
        hFSMBuilderGUILayout.setVerticalGroup(
            hFSMBuilderGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 681, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(hFSMBuilderGUI);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 990, 530));

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        newButton.setIcon(resourceMap.getIcon("newButton.icon")); // NOI18N
        newButton.setText(resourceMap.getString("newButton.text")); // NOI18N
        newButton.setToolTipText(resourceMap.getString("newButton.toolTipText")); // NOI18N
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setName("newButton"); // NOI18N
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(newButton);

        saveButton.setIcon(resourceMap.getIcon("saveButton.icon")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setToolTipText(resourceMap.getString("saveButton.toolTipText")); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(saveButton);

        loadButton.setIcon(resourceMap.getIcon("loadButton.icon")); // NOI18N
        loadButton.setText(resourceMap.getString("loadButton.text")); // NOI18N
        loadButton.setToolTipText(resourceMap.getString("loadButton.toolTipText")); // NOI18N
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setName("loadButton"); // NOI18N
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(loadButton);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jToolBar1.add(jSeparator1);

        quickSaveButton.setIcon(resourceMap.getIcon("quickSaveButton.icon")); // NOI18N
        quickSaveButton.setText(resourceMap.getString("quickSaveButton.text")); // NOI18N
        quickSaveButton.setToolTipText(resourceMap.getString("quickSaveButton.toolTipText")); // NOI18N
        quickSaveButton.setFocusable(false);
        quickSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        quickSaveButton.setName("quickSaveButton"); // NOI18N
        quickSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        quickSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quickSaveButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(quickSaveButton);

        quickLoadButton.setIcon(resourceMap.getIcon("quickLoadButton.icon")); // NOI18N
        quickLoadButton.setText(resourceMap.getString("quickLoadButton.text")); // NOI18N
        quickLoadButton.setToolTipText(resourceMap.getString("quickLoadButton.toolTipText")); // NOI18N
        quickLoadButton.setFocusable(false);
        quickLoadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        quickLoadButton.setName("quickLoadButton"); // NOI18N
        quickLoadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        quickLoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quickLoadButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(quickLoadButton);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jToolBar1.add(jSeparator2);

        saveImageButton.setIcon(resourceMap.getIcon("saveImageButton.icon")); // NOI18N
        saveImageButton.setText(resourceMap.getString("saveImageButton.text")); // NOI18N
        saveImageButton.setToolTipText(resourceMap.getString("saveImageButton.toolTipText")); // NOI18N
        saveImageButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        saveImageButton.setFocusable(false);
        saveImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveImageButton.setName("saveImageButton"); // NOI18N
        saveImageButton.setPreferredSize(new java.awt.Dimension(50, 50));
        saveImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveImageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveImageButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(saveImageButton);

        add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 320, 40));

        componentNameLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
        componentNameLabel.setText(resourceMap.getString("componentNameLabel.text")); // NOI18N
        componentNameLabel.setName("componentNameLabel"); // NOI18N
        add(componentNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, 310, 20));

        holdCheckBox.setFont(resourceMap.getFont("holdCheckBox.font")); // NOI18N
        holdCheckBox.setText(resourceMap.getString("holdCheckBox.text")); // NOI18N
        holdCheckBox.setName("holdCheckBox"); // NOI18N
        add(holdCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 84, -1, -1));

        buildButtonsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buildButtonsPanel.setName("buildButtonsPanel"); // NOI18N
        buildButtonsPanel.setPreferredSize(new java.awt.Dimension(135, 410));
        buildButtonsPanel.setRequestFocusEnabled(false);
        buildButtonsPanel.setVerifyInputWhenFocusTarget(false);

        newStateTB.setIcon(resourceMap.getIcon("newStateTB.icon")); // NOI18N
        newStateTB.setText(resourceMap.getString("newStateTB.text")); // NOI18N
        newStateTB.setToolTipText(resourceMap.getString("newStateTB.toolTipText")); // NOI18N
        newStateTB.setName("newStateTB"); // NOI18N
        newStateTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStateTBActionPerformed(evt);
            }
        });

        eraseStateTB.setIcon(resourceMap.getIcon("eraseStateTB.icon")); // NOI18N
        eraseStateTB.setText(resourceMap.getString("eraseStateTB.text")); // NOI18N
        eraseStateTB.setToolTipText(resourceMap.getString("eraseStateTB.toolTipText")); // NOI18N
        eraseStateTB.setName("eraseStateTB"); // NOI18N
        eraseStateTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseStateTBActionPerformed(evt);
            }
        });

        eraseTransitionTB.setIcon(resourceMap.getIcon("eraseTransitionTB.icon")); // NOI18N
        eraseTransitionTB.setText(resourceMap.getString("eraseTransitionTB.text")); // NOI18N
        eraseTransitionTB.setToolTipText(resourceMap.getString("eraseTransitionTB.toolTipText")); // NOI18N
        eraseTransitionTB.setName("eraseTransitionTB"); // NOI18N
        eraseTransitionTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseTransitionTBActionPerformed(evt);
            }
        });

        newTransitionTB.setIcon(resourceMap.getIcon("newTransitionTB.icon")); // NOI18N
        newTransitionTB.setText(resourceMap.getString("newTransitionTB.text")); // NOI18N
        newTransitionTB.setToolTipText(resourceMap.getString("newTransitionTB.toolTipText")); // NOI18N
        newTransitionTB.setName("newTransitionTB"); // NOI18N
        newTransitionTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransitionTBActionPerformed(evt);
            }
        });

        newComponentTB.setIcon(resourceMap.getIcon("newComponentTB.icon")); // NOI18N
        newComponentTB.setText(resourceMap.getString("newComponentTB.text")); // NOI18N
        newComponentTB.setToolTipText(resourceMap.getString("newComponentTB.toolTipText")); // NOI18N
        newComponentTB.setName("newComponentTB"); // NOI18N
        newComponentTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newComponentTBActionPerformed(evt);
            }
        });

        eraseComponentTB.setIcon(resourceMap.getIcon("eraseComponentTB.icon")); // NOI18N
        eraseComponentTB.setText(resourceMap.getString("eraseComponentTB.text")); // NOI18N
        eraseComponentTB.setToolTipText(resourceMap.getString("eraseComponentTB.toolTipText")); // NOI18N
        eraseComponentTB.setName("eraseComponentTB"); // NOI18N
        eraseComponentTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseComponentTBActionPerformed(evt);
            }
        });

        newConnectionTB.setIcon(resourceMap.getIcon("newConnectionTB.icon")); // NOI18N
        newConnectionTB.setText(resourceMap.getString("newConnectionTB.text")); // NOI18N
        newConnectionTB.setToolTipText(resourceMap.getString("newConnectionTB.toolTipText")); // NOI18N
        newConnectionTB.setMaximumSize(new java.awt.Dimension(88, 61));
        newConnectionTB.setMinimumSize(new java.awt.Dimension(88, 61));
        newConnectionTB.setName("newConnectionTB"); // NOI18N
        newConnectionTB.setPreferredSize(new java.awt.Dimension(88, 61));
        newConnectionTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnectionTBActionPerformed(evt);
            }
        });

        eraseConnectionTB.setIcon(resourceMap.getIcon("eraseConnectionTB.icon")); // NOI18N
        eraseConnectionTB.setText(resourceMap.getString("eraseConnectionTB.text")); // NOI18N
        eraseConnectionTB.setToolTipText(resourceMap.getString("eraseConnectionTB.toolTipText")); // NOI18N
        eraseConnectionTB.setName("eraseConnectionTB"); // NOI18N
        eraseConnectionTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eraseConnectionTBMouseClicked(evt);
            }
        });
        eraseConnectionTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseConnectionTBActionPerformed(evt);
            }
        });

        autoRestartCB.setText(resourceMap.getString("autoRestartCB.text")); // NOI18N
        autoRestartCB.setName("autoRestartCB"); // NOI18N
        autoRestartCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRestartCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buildButtonsPanelLayout = new javax.swing.GroupLayout(buildButtonsPanel);
        buildButtonsPanel.setLayout(buildButtonsPanelLayout);
        buildButtonsPanelLayout.setHorizontalGroup(
            buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(autoRestartCB))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buildButtonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                        .addComponent(eraseStateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newStateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(eraseTransitionTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newTransitionTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                        .addComponent(eraseComponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newComponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newConnectionTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eraseConnectionTB))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        buildButtonsPanelLayout.setVerticalGroup(
            buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eraseStateTB)
                    .addComponent(newStateTB))
                .addGap(8, 8, 8)
                .addGroup(buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eraseTransitionTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newTransitionTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(buildButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eraseComponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newComponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(newConnectionTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(eraseConnectionTB)
                .addGap(33, 33, 33)
                .addComponent(autoRestartCB))
        );

        add(buildButtonsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 119, -1, 420));
    }// </editor-fold>//GEN-END:initComponents

    private void newTransitionTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransitionTBActionPerformed
		if (newTransitionTB.isSelected()) {

			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newStateTB.setSelected(false);
			newComponentTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.ADD_TRANSITION_SOURCE);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}

    }//GEN-LAST:event_newTransitionTBActionPerformed

    private void eraseTransitionTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseTransitionTBActionPerformed
		if (eraseTransitionTB.isSelected()) {

			newStateTB.setSelected(false);
			eraseStateTB.setSelected(false);
			newTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newComponentTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.REMOVE_TRANSITION);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
    }//GEN-LAST:event_eraseTransitionTBActionPerformed

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
		openSaveFileMenu();
    }//GEN-LAST:event_saveButtonMouseClicked

    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
		openLoadFileMenu();
    }//GEN-LAST:event_loadButtonMouseClicked

    private void newButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseClicked
		hFSMBuilderGUI.reset();
		autoRestartCB.setSelected(false);

		lastFile = null;
    }//GEN-LAST:event_newButtonMouseClicked

    private void eraseConnectionTBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraseConnectionTBMouseClicked
		if (eraseConnectionTB.isSelected()) {

			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newConnectionTB.setSelected(false);
			newStateTB.setSelected(false);
			newTransitionTB.setSelected(false);
			newComponentTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.REMOVE_CONNECTION);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
    }//GEN-LAST:event_eraseConnectionTBMouseClicked

    private void quickSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickSaveButtonMouseClicked

		if (lastFile != null) {
			saveFile(lastFile);
		} else {
			openSaveFileMenu();
		}
    }//GEN-LAST:event_quickSaveButtonMouseClicked

    private void quickLoadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quickLoadButtonMouseClicked

		if (lastFile != null) {
			loadXMLFile(lastFile);
			watchGeneratedFile(lastFile);
		} else {
			openLoadFileMenu();
		}
    }//GEN-LAST:event_quickLoadButtonMouseClicked

    private void autoRestartCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRestartCBActionPerformed
		hFSMBuilderGUI.setAutoRestart(autoRestartCB.isSelected());

    }//GEN-LAST:event_autoRestartCBActionPerformed

	private void saveImageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveImageButtonMouseClicked
		PNode root = hFSMBuilderGUI.getRoot();

		//Aqu√≠ es getGlobalFullBounds() porque root.getGlobalBounds() vale (0, 0).
		//Es decir, no tiene bordes el nodo root.
		//Por eso hay que incluir a los bordes de todos sus hijos con
		//getFullBounds() o con getFullBoundsReference(), ya que son equivalentes.
		//Y en este caso tambi√©n valdr√≠a getGlobalFullBounds().
		Image myImage = new BufferedImage((int) root.getFullBoundsReference().width,
			(int) root.getFullBoundsReference().height, BufferedImage.TYPE_INT_RGB);

		//Covierte a imagen y le a√±ade un fondo blanco, porque si no saca una imagen en negativo.
		root.toImage((BufferedImage) myImage, new Color(255, 255, 255));

		JFileChooser fc = new JFileChooser(Builder.WORKING_DIRECTORY + PATH_TO_COMPONENTS);
		//Establece un filtro para elegir s√≥lo ficheros PNG.
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Im√°genes PNG", "png");

		fc.setFileFilter(filter);
		int option = fc.showSaveDialog(this);

		if (option == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fc.getSelectedFile();
			File fileToSave = selectedFile;
			//Comprueba la extensi√≥n. Si no la tiene se la a√±ade.
			if (selectedFile.getName().lastIndexOf(".png") == -1) {
				fileToSave = new File(selectedFile.getAbsolutePath() + ".png");
			}
			try {
				//Se ve MEJOR con formato PNG que con JPG.
				ImageIO.write((RenderedImage) myImage, "png", fileToSave);
			} catch (IOException e) {
				System.out.println("Error de escritura de la imagen");
			}
		}
	}//GEN-LAST:event_saveImageButtonMouseClicked

	private void newStateTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStateTBActionPerformed
		if (newStateTB.isSelected()) {

			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newComponentTB.setSelected(false);
			newTransitionTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.ADD_STATE);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_newStateTBActionPerformed

	private void eraseStateTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseStateTBActionPerformed
		if (eraseStateTB.isSelected()) {
			newStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			newTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newComponentTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.REMOVE_STATE);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_eraseStateTBActionPerformed

	private void newComponentTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newComponentTBActionPerformed
		if (newComponentTB.isSelected()) {
			newStateTB.setSelected(false);
			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			newTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.ADD_COMPONENT);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_newComponentTBActionPerformed

	private void eraseComponentTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseComponentTBActionPerformed
		if (eraseComponentTB.isSelected()) {
			newStateTB.setSelected(false);
			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newConnectionTB.setSelected(false);
			newTransitionTB.setSelected(false);
			newComponentTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.REMOVE_COMPONENT);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_eraseComponentTBActionPerformed

	private void newConnectionTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnectionTBActionPerformed
		if (newConnectionTB.isSelected()) {

			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			eraseConnectionTB.setSelected(false);
			newStateTB.setSelected(false);
			newTransitionTB.setSelected(false);
			newComponentTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.ADD_CONNECTION_SOURCE);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_newConnectionTBActionPerformed

	private void eraseConnectionTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseConnectionTBActionPerformed
		if (eraseConnectionTB.isSelected()) {

			eraseStateTB.setSelected(false);
			eraseTransitionTB.setSelected(false);
			eraseComponentTB.setSelected(false);
			newConnectionTB.setSelected(false);
			newStateTB.setSelected(false);
			newTransitionTB.setSelected(false);
			newComponentTB.setSelected(false);

			hFSMBuilderGUI.setMode(BuilderGUI.REMOVE_CONNECTION);
		} else {
			hFSMBuilderGUI.setMode(BuilderGUI.NORMAL);
		}
	}//GEN-LAST:event_eraseConnectionTBActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoRestartCB;
    private javax.swing.JPanel buildButtonsPanel;
    private javax.swing.JLabel componentNameLabel;
    private javax.swing.JToggleButton eraseComponentTB;
    private javax.swing.JToggleButton eraseConnectionTB;
    private javax.swing.JToggleButton eraseStateTB;
    private javax.swing.JToggleButton eraseTransitionTB;
    private jmanager.VICODE.BuilderGUI hFSMBuilderGUI;
    private javax.swing.JCheckBox holdCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newButton;
    private javax.swing.JToggleButton newComponentTB;
    private javax.swing.JToggleButton newConnectionTB;
    private javax.swing.JToggleButton newStateTB;
    private javax.swing.JToggleButton newTransitionTB;
    private javax.swing.JButton quickLoadButton;
    private javax.swing.JButton quickSaveButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveImageButton;
    // End of variables declaration//GEN-END:variables

	public void fileChanged(File file) {
		loadXMLFile(file);
	}

	private void loadXMLFile(File selectedFile) {

		hFSMBuilderGUI.closeAllFrames();
		hFSMBuilderGUI.reset();

		autoRestartCB.setSelected(false);

		try {
			Loader ll = new Loader(selectedFile.toString());
			ll.parse();

			String filename = (selectedFile.getAbsolutePath().substring(0,
				selectedFile.getAbsolutePath().lastIndexOf(".xml")));

			String fileNameCPP = filename + ".cpp";
			CppParser.parseCPP(fileNameCPP);

			String fileNameHPP = filename + ".h";
			CppParser.parseH(fileNameHPP);

		} catch (IOException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
		} catch (SAXException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void watchGeneratedFile(File xmlFile) {

		if (taskXML != null) {
			taskXML.cancel();
		}
		if (taskCPP != null) {
			taskCPP.cancel();
		}
		if (taskHPP != null) {
			taskHPP.cancel();
		}
		if (timer != null) {
			timer.purge();
		} else {
			timer = new Timer();
		}

		String filename = (xmlFile.getAbsolutePath().substring(0,
			xmlFile.getAbsolutePath().lastIndexOf(".xml")));
		String fileNameHPP = filename + ".h";
		String fileNameCPP = filename + ".cpp";

		File fileHPP = new File(fileNameHPP);
		File fileCPP = new File(fileNameCPP);

		taskXML = new FileWatcher(xmlFile, xmlFile, this);
		taskHPP = new FileWatcher(fileHPP, xmlFile, this);
		taskCPP = new FileWatcher(fileCPP, xmlFile, this);

		Date date = new Date();

		timer.schedule(taskXML, date, 1000);
		timer.schedule(taskCPP, date, 1000);
		timer.schedule(taskHPP, date, 1000);
	}

	private boolean saveFile(File selectedFile) {
		boolean success = false;

		if (selectedFile.getName().lastIndexOf(".xml") == -1) {
			String mensaje = "El nombre de fichero no termina en \".xml\"";
			JOptionPane.showMessageDialog(null, mensaje, "Error saving", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		String fileName = (selectedFile.getAbsolutePath().substring(0,
			selectedFile.getAbsolutePath().lastIndexOf(".xml")));

		if (selectedFile.exists()) {
			String mensaje = "El archivo ya existe, al continuar se sobreescribir√° el componente. ¬øContinuar?";
			int selection = JOptionPane.showOptionDialog(null, mensaje, "Aviso", JOptionPane.YES_NO_OPTION,
				JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"YES", "NO"}, "NO");

			if (selection == 0) {
				//Se eligi√≥ "YES", continua.
				componentId = selectedFile.getName().substring(0,
					selectedFile.getName().lastIndexOf(".xml"));
			} else {
				//Se eligi√≥ "NO", sale.
				return false;
			}
		} else {
			componentId = selectedFile.getName().substring(0, selectedFile.getName().lastIndexOf(".xml"));
		}

		lastFile = selectedFile;

		if (taskXML != null) {
			taskXML.disabled();
		}
		if (taskCPP != null) {
			taskCPP.disabled();
		}
		if (taskHPP != null) {
			taskHPP.disabled();
		}

		String codeXML = new CodeGenerator().generateXML(componentId);
		byte data[] = codeXML.getBytes();
		FileOutputStream out = null;

		try {
			out = new FileOutputStream(selectedFile);
			out.write(data, 0, data.length);
			success = true;
		} catch (IOException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			if (out != null) {
				try {
					out.flush();
					out.close();
				} catch (IOException ex) {
					Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}

		String codeCPP = new CodeGenerator().generateCPPCode(componentId);
		String fileNameCPP = fileName + ".cpp";
		byte dataCPP[] = codeCPP.getBytes();

		out = null;

		try {
			out = new FileOutputStream(fileNameCPP);
			out.write(dataCPP, 0, dataCPP.length);
			success = success && true;
		} catch (IOException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
			success = false;
		} finally {
			if (out != null) {
				try {
					out.flush();
					out.close();
				} catch (IOException ex) {
					Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}

		String codeHPP = new CodeGenerator().generateHPPCode(componentId);
		String fileNameHPP = fileName + ".h";
		byte datahpp[] = codeHPP.getBytes();

		out = null;

		try {
			out = new FileOutputStream(fileNameHPP);
			out.write(datahpp, 0, datahpp.length);
			success = success && true;
		} catch (IOException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
			success = false;
		} finally {
			if (out != null) {
				try {
					out.flush();
					out.close();
				} catch (IOException ex) {
					Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}
		try {
			//TODO: PREGUNTAR POR QU√â LO PARAN TANTO TIEMPO.
			//¬øEsto no habr√≠a que hacerlo ANTES de escribir en el fichero??
			//Y luego ya despu√©s volver a activar las tasks.
			Thread.sleep(1200);
		} catch (InterruptedException ex) {
			Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
		}

		if (taskXML != null) {
			taskXML.enable();
		}
		if (taskCPP != null) {
			taskCPP.enable();
		}
		if (taskHPP != null) {
			taskHPP.enable();
		}

		return success;
	}

	private void openSaveFileMenu() {
		JFileChooser fc;
		boolean success = false;

		if (lastDir != null) {
			fc = new JFileChooser(lastDir);
		} else {
			fc = new JFileChooser(System.getProperty("user.dir") + PATH_TO_COMPONENTS);
		}

		XMLFileFilter filter = new XMLFileFilter();
		fc.addChoosableFileFilter(filter);

		int option = fc.showSaveDialog(fc);
		
		if (option == JFileChooser.APPROVE_OPTION) {
			success = saveFile(fc.getSelectedFile());
			lastDir = fc.getCurrentDirectory();
		}

		if (success) {
			watchGeneratedFile(fc.getSelectedFile());
			//Shows the created component name in the top of the Builder panel.
			componentNameLabel.setText("Componente:  " + componentId);
		}
	}

	private void openLoadFileMenu() {
		JFileChooser fc;
		if (lastDir != null) {
			fc = new JFileChooser(lastDir);
		} else {
			fc = new JFileChooser(System.getProperty("user.dir") + PATH_TO_COMPONENTS);
		}

		XMLFileFilter filter = new XMLFileFilter();
		fc.addChoosableFileFilter(filter);

		int option = fc.showOpenDialog(fc);

		if (option == JFileChooser.APPROVE_OPTION) {
			lastDir = fc.getCurrentDirectory();

			if (fc.getSelectedFile().getName().lastIndexOf(".xml") != -1) {
				componentId = (fc.getSelectedFile().getName().substring(0,
					fc.getSelectedFile().getName().lastIndexOf(".xml")));

				loadXMLFile(fc.getSelectedFile()); //TODO: que este m√©todo devuelva un boolean.
				watchGeneratedFile(fc.getSelectedFile());
				lastFile = fc.getSelectedFile();

				//Shows the loaded component name in the top of the Builder panel.
				componentNameLabel.setText("Componente:  " + componentId);
			}
		}
	}

	public void setAutoRestart(boolean b) {
		autoRestartCB.setSelected(b);
	}
}
