/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CameraConfFrame.java
 *
 * Created on 25-nov-2009, 12:17:01
 */

package jmanager;

/**
 *
 * @author paco
 */
public class CameraConfFrame extends javax.swing.JFrame {

    /** Creates new form CameraConfFrame */
    public CameraConfFrame() {
        initComponents();

        this.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BrightnessSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ContrastSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        SaturationSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        HueSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        RedChromaSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        BlueChromaSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        GainSlider = new javax.swing.JSlider();
        AutoExpositionCheckBox = new javax.swing.JCheckBox();
        AutoWhiteBalanceCheckBox = new javax.swing.JCheckBox();
        AutoGainCheckBox = new javax.swing.JCheckBox();

        setName("Form"); // NOI18N

        BrightnessSlider.setMaximum(255);
        BrightnessSlider.setValue(0);
        BrightnessSlider.setName("BrightnessSlider"); // NOI18N
        BrightnessSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BrightnessSliderMouseReleased(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jmanager.JmanagerApp.class).getContext().getResourceMap(CameraConfFrame.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        ContrastSlider.setMaximum(127);
        ContrastSlider.setValue(0);
        ContrastSlider.setName("ContrastSlider"); // NOI18N
        ContrastSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ContrastSliderMouseReleased(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        SaturationSlider.setMaximum(255);
        SaturationSlider.setValue(0);
        SaturationSlider.setName("SaturationSlider"); // NOI18N
        SaturationSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SaturationSliderMouseReleased(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        HueSlider.setMajorTickSpacing(-180);
        HueSlider.setMaximum(180);
        HueSlider.setValue(0);
        HueSlider.setName("HueSlider"); // NOI18N
        HueSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HueSliderMouseReleased(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        RedChromaSlider.setMaximum(255);
        RedChromaSlider.setValue(0);
        RedChromaSlider.setName("RedChromaSlider"); // NOI18N
        RedChromaSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RedChromaSliderMouseReleased(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        BlueChromaSlider.setMaximum(255);
        BlueChromaSlider.setValue(0);
        BlueChromaSlider.setName("BlueChromaSlider"); // NOI18N
        BlueChromaSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BlueChromaSliderMouseReleased(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        GainSlider.setMaximum(255);
        GainSlider.setValue(0);
        GainSlider.setName("GainSlider"); // NOI18N
        GainSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GainSliderMouseReleased(evt);
            }
        });

        AutoExpositionCheckBox.setText(resourceMap.getString("AutoExpositionCheckBox.text")); // NOI18N
        AutoExpositionCheckBox.setName("AutoExpositionCheckBox"); // NOI18N
        AutoExpositionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoExpositionCheckBoxActionPerformed(evt);
            }
        });

        AutoWhiteBalanceCheckBox.setText(resourceMap.getString("AutoWhiteBalanceCheckBox.text")); // NOI18N
        AutoWhiteBalanceCheckBox.setName("AutoWhiteBalanceCheckBox"); // NOI18N
        AutoWhiteBalanceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoWhiteBalanceCheckBoxActionPerformed(evt);
            }
        });

        AutoGainCheckBox.setText(resourceMap.getString("AutoGainCheckBox.text")); // NOI18N
        AutoGainCheckBox.setName("AutoGainCheckBox"); // NOI18N
        AutoGainCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoGainCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BrightnessSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                            .addComponent(ContrastSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(SaturationSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RedChromaSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                            .addComponent(HueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)))
                    .addComponent(AutoExpositionCheckBox)
                    .addComponent(AutoWhiteBalanceCheckBox)
                    .addComponent(AutoGainCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GainSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                            .addComponent(BlueChromaSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(BrightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(ContrastSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(SaturationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(HueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(RedChromaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(BlueChromaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(GainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(AutoExpositionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AutoWhiteBalanceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AutoGainCheckBox)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrightnessSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BrightnessSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setBrightness:" + BrightnessSlider.getValue() + ":");
    }//GEN-LAST:event_BrightnessSliderMouseReleased

    private void ContrastSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContrastSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setContrast:" + ContrastSlider.getValue() + ":");
    }//GEN-LAST:event_ContrastSliderMouseReleased

    private void SaturationSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaturationSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setSaturation:" + SaturationSlider.getValue() + ":");
    }//GEN-LAST:event_SaturationSliderMouseReleased

    private void HueSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HueSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setHue:" + HueSlider.getValue() + ":");
    }//GEN-LAST:event_HueSliderMouseReleased

    private void RedChromaSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RedChromaSliderMouseReleased
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setRedChroma:" +RedChromaSlider.getValue() + ":");
    }//GEN-LAST:event_RedChromaSliderMouseReleased

    private void BlueChromaSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BlueChromaSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setBlueChroma:" + BlueChromaSlider.getValue() + ":");
    }//GEN-LAST:event_BlueChromaSliderMouseReleased

    private void GainSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GainSliderMouseReleased
        dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setGain:" + GainSlider.getValue() + ":");
    }//GEN-LAST:event_GainSliderMouseReleased

    private void AutoExpositionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoExpositionCheckBoxActionPerformed
        if(AutoExpositionCheckBox.isSelected()){
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoExposition:true:");
        }else{
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoExposition:false:");
        }
    }//GEN-LAST:event_AutoExpositionCheckBoxActionPerformed

    private void AutoWhiteBalanceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoWhiteBalanceCheckBoxActionPerformed
        if(AutoWhiteBalanceCheckBox.isSelected()){
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoWhiteBalance:true:");
        }else{
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoWhiteBalance:false:");
        }
    }//GEN-LAST:event_AutoWhiteBalanceCheckBoxActionPerformed

    private void AutoGainCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoGainCheckBoxActionPerformed
        if( AutoGainCheckBox.isSelected()){
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoGain:true:");
        }else{
            dataResp resp = JmanagerView.root.getConnection().send("setCameraParam:setAutoGain:false:");
        }
    }//GEN-LAST:event_AutoGainCheckBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CameraConfFrame().setVisible(true);
            }
        });
    }

    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        refresh();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutoExpositionCheckBox;
    private javax.swing.JCheckBox AutoGainCheckBox;
    private javax.swing.JCheckBox AutoWhiteBalanceCheckBox;
    private javax.swing.JSlider BlueChromaSlider;
    private javax.swing.JSlider BrightnessSlider;
    private javax.swing.JSlider ContrastSlider;
    private javax.swing.JSlider GainSlider;
    private javax.swing.JSlider HueSlider;
    private javax.swing.JSlider RedChromaSlider;
    private javax.swing.JSlider SaturationSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables


    public void refresh() {
         dataResp resp = JmanagerView.root.getConnection().send("getCameraParam:");

         String[] comps = new String(resp.data).split(":");

         BrightnessSlider.setValue(new Integer(comps[0]).intValue());
         ContrastSlider.setValue(new Integer(comps[1]).intValue());
         SaturationSlider.setValue(new Integer(comps[2]).intValue());
         HueSlider.setValue(new Integer(comps[3]).intValue());
         RedChromaSlider.setValue(new Integer(comps[4]).intValue());
         BlueChromaSlider.setValue(new Integer(comps[5]).intValue());
         GainSlider.setValue(new Integer(comps[6]).intValue());

         AutoGainCheckBox.setSelected(comps[7].compareTo("1") == 0);
         AutoExpositionCheckBox.setSelected(comps[8].compareTo("1") == 0);
         AutoWhiteBalanceCheckBox.setSelected(comps[9].compareTo("1") == 0);
         
    }
}
