/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FundacionCienApp.java
 *
 * Created on 20-jul-2011, 10:46:48
 */
package jmanager.cien;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import jmanager.cien.wiimote.Wiimote;

/**
 *
 * @author gon
 */
public class FundacionCienApp extends javax.swing.JFrame implements Observer {

    private RobotWrapper robotWrapper;
    private Wiimote wiimote;
    private SoundsQueue soundsQueue;

    // Timer
    private Timer timer;
    private BuscarHostTimerTask currentTimerTask;

    /** Creates new form FundacionCienApp */
    public FundacionCienApp() {
        initComponents();

        enableEverything(false);

        // Init
        robotWrapper = new RobotWrapper();
        soundsQueue = new SoundsQueue(robotWrapper);
        timer = new Timer(true);
        currentTimerTask = new BuscarHostTimerTask(conexionNombreTextField.getText());
        timer.schedule(currentTimerTask, 0, 1000);

        // Observers
        robotWrapper.addObserver(this);
        soundsQueue.addObserver(this);

        // Add wiimote
        try {
            wiimote = new Wiimote(robotWrapper);
            wiimote.addObserver(this);
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(this,
                        "Se ha producido un error al intentar inicializar el bluetooth.\n" 
                            + ex.getMessage() +".\n"
                            + "\nNo se puede conectar el wiimote.",
                        "Error en el bluetooth", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        conexionRobotPanel = new javax.swing.JPanel();
        conexionRobotTitle = new javax.swing.JLabel();
        conexionRobotLabel = new javax.swing.JLabel();
        conexionRobotButton = new javax.swing.JButton();
        conexionNombreTextField = new javax.swing.JTextField();
        conexionRobotProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        wiimoteStatusLabel = new javax.swing.JLabel();
        wiimoteButton = new javax.swing.JButton();
        wiimoteProgressBar = new javax.swing.JProgressBar();
        movimientoPanel = new javax.swing.JPanel();
        movimientoRotacionSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        movimientoLateralSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        movimientoStopButton = new javax.swing.JButton();
        movimientoSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        robotPortTextField = new javax.swing.JTextField();
        cabezaPanel = new javax.swing.JPanel();
        centrarCabezaButton = new javax.swing.JButton();
        cabezaPanSlider = new javax.swing.JSlider();
        cabezaTiltSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        moviesPanel = new javax.swing.JPanel();
        lenguajeLevesButton = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        musicoterapiaLevesButton = new javax.swing.JToggleButton();
        fisioterapiaLevesButton = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        lenguajeModeradosButton = new javax.swing.JToggleButton();
        musicoterapiaModeradosButton = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        terapiaocupacionalCentrodia1Button = new javax.swing.JToggleButton();
        fisioterapiaCentrodia = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        comenzarButton = new javax.swing.JButton();
        terapiaocupacionalCentrodia2Button = new javax.swing.JToggleButton();
        terapiaTextField = new javax.swing.JTextField();
        irAButton = new javax.swing.JButton();
        sonidosPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sonidosDisponiblesList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        sonidosReproduccionList = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        sonidosVolumenSlider = new javax.swing.JSlider();
        jLabel14 = new javax.swing.JLabel();
        movimientosPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        movimientosComboBox = new javax.swing.JComboBox();
        apagarRobotButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fundación CIEN"); // NOI18N

        conexionRobotPanel.setName("conexionRobotPanel"); // NOI18N

        conexionRobotTitle.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        conexionRobotTitle.setText("Conexión con el robot");
        conexionRobotTitle.setName("conexionRobotTitle"); // NOI18N

        conexionRobotLabel.setText("Estado: Desconectado");
        conexionRobotLabel.setName("conexionRobotLabel"); // NOI18N

        conexionRobotButton.setText("Conectar");
        conexionRobotButton.setActionCommand("conectar");
        conexionRobotButton.setName("conexionRobotButton"); // NOI18N
        conexionRobotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conexionRobotButtonActionPerformed(evt);
            }
        });

        conexionNombreTextField.setText("algarrobo");
        conexionNombreTextField.setName("conexionNombreTextField"); // NOI18N
        conexionNombreTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                conexionNombreTextFieldKeyReleased(evt);
            }
        });

        conexionRobotProgressBar.setName("conexionRobotProgressBar"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel9.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel9.setText("Conexión del Wiimote");
        jLabel9.setName("jLabel9"); // NOI18N

        wiimoteStatusLabel.setText("Estado: Desconectado");
        wiimoteStatusLabel.setName("wiimoteStatusLabel"); // NOI18N

        wiimoteButton.setText("Conectar");
        wiimoteButton.setActionCommand("conectar");
        wiimoteButton.setName("wiimoteButton"); // NOI18N
        wiimoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiimoteButtonActionPerformed(evt);
            }
        });

        wiimoteProgressBar.setName("wiimoteProgressBar"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wiimoteProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(wiimoteStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addComponent(wiimoteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wiimoteStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wiimoteProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wiimoteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        movimientoPanel.setName("movimientoPanel"); // NOI18N

        movimientoRotacionSlider.setMinimum(-100);
        movimientoRotacionSlider.setValue(0);
        movimientoRotacionSlider.setName("movimientoRotacionSlider"); // NOI18N
        movimientoRotacionSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                movimientoRotacionSliderMouseReleased(evt);
            }
        });

        jLabel2.setText("Rotación");
        jLabel2.setName("jLabel2"); // NOI18N

        movimientoLateralSlider.setMinimum(-100);
        movimientoLateralSlider.setValue(0);
        movimientoLateralSlider.setName("movimientoLateralSlider"); // NOI18N
        movimientoLateralSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                movimientoLateralSliderMouseReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel3.setText("Control de movimiento");
        jLabel3.setName("jLabel3"); // NOI18N

        movimientoStopButton.setText("Stop");
        movimientoStopButton.setName("movimientoStopButton"); // NOI18N
        movimientoStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movimientoStopButtonActionPerformed(evt);
            }
        });

        movimientoSlider.setMinimum(-100);
        movimientoSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        movimientoSlider.setValue(0);
        movimientoSlider.setName("movimientoSlider"); // NOI18N
        movimientoSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                movimientoSliderMouseReleased(evt);
            }
        });

        jLabel1.setText("Lateral");
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout movimientoPanelLayout = new javax.swing.GroupLayout(movimientoPanel);
        movimientoPanel.setLayout(movimientoPanelLayout);
        movimientoPanelLayout.setHorizontalGroup(
            movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movimientoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(movimientoPanelLayout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addComponent(movimientoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(movimientoLateralSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(movimientoRotacionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(movimientoStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        movimientoPanelLayout.setVerticalGroup(
            movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movimientoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(221, Short.MAX_VALUE))
            .addGroup(movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(movimientoPanelLayout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addGroup(movimientoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(movimientoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movimientoPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(movimientoLateralSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(movimientoStopButton)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(movimientoRotacionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        robotPortTextField.setName("robotPortTextField"); // NOI18N

        javax.swing.GroupLayout conexionRobotPanelLayout = new javax.swing.GroupLayout(conexionRobotPanel);
        conexionRobotPanel.setLayout(conexionRobotPanelLayout);
        conexionRobotPanelLayout.setHorizontalGroup(
            conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conexionRobotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conexionRobotTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(conexionRobotLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addGroup(conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(conexionRobotProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conexionRobotButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(conexionRobotPanelLayout.createSequentialGroup()
                        .addComponent(conexionNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(robotPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movimientoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        conexionRobotPanelLayout.setVerticalGroup(
            conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conexionRobotPanelLayout.createSequentialGroup()
                .addGroup(conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conexionRobotPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(conexionRobotTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(conexionRobotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(conexionNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(robotPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conexionRobotLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conexionRobotProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conexionRobotButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(movimientoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cabezaPanel.setName("cabezaPanel"); // NOI18N

        centrarCabezaButton.setText("Centrar");
        centrarCabezaButton.setName("centrarCabezaButton"); // NOI18N
        centrarCabezaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centrarCabezaButtonActionPerformed(evt);
            }
        });

        cabezaPanSlider.setMinimum(-100);
        cabezaPanSlider.setValue(0);
        cabezaPanSlider.setName("cabezaPanSlider"); // NOI18N
        cabezaPanSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cabezaPanSliderMouseReleased(evt);
            }
        });

        cabezaTiltSlider.setMinimum(-100);
        cabezaTiltSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        cabezaTiltSlider.setValue(0);
        cabezaTiltSlider.setName("cabezaTiltSlider"); // NOI18N
        cabezaTiltSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cabezaTiltSliderMouseReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel4.setText("Movimiento de la cabeza");
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout cabezaPanelLayout = new javax.swing.GroupLayout(cabezaPanel);
        cabezaPanel.setLayout(cabezaPanelLayout);
        cabezaPanelLayout.setHorizontalGroup(
            cabezaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabezaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cabezaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cabezaPanSlider, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(cabezaTiltSlider, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(centrarCabezaButton, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addContainerGap())
        );
        cabezaPanelLayout.setVerticalGroup(
            cabezaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabezaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centrarCabezaButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cabezaPanSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cabezaTiltSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        moviesPanel.setName("moviesPanel"); // NOI18N

        lenguajeLevesButton.setText("Lenguaje");
        lenguajeLevesButton.setName("lenguajeLevesButton"); // NOI18N
        lenguajeLevesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lenguajeLevesButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel5.setText("Terapias");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText("Leves");
        jLabel6.setName("jLabel6"); // NOI18N

        musicoterapiaLevesButton.setText("Musicoterapia");
        musicoterapiaLevesButton.setName("musicoterapiaLevesButton"); // NOI18N
        musicoterapiaLevesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicoterapiaLevesButtonActionPerformed(evt);
            }
        });

        fisioterapiaLevesButton.setText("Fisioterapia");
        fisioterapiaLevesButton.setName("fisioterapiaLevesButton"); // NOI18N
        fisioterapiaLevesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fisioterapiaLevesButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Moderados");
        jLabel7.setName("jLabel7"); // NOI18N

        lenguajeModeradosButton.setText("Lenguaje");
        lenguajeModeradosButton.setName("lenguajeModeradosButton"); // NOI18N
        lenguajeModeradosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lenguajeModeradosButtonActionPerformed(evt);
            }
        });

        musicoterapiaModeradosButton.setText("Musicoterapia");
        musicoterapiaModeradosButton.setName("musicoterapiaModeradosButton"); // NOI18N
        musicoterapiaModeradosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicoterapiaModeradosButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Centro día");
        jLabel8.setName("jLabel8"); // NOI18N

        terapiaocupacionalCentrodia1Button.setText("Terapia ocupacional 1");
        terapiaocupacionalCentrodia1Button.setName("terapiaocupacionalCentrodia1Button"); // NOI18N
        terapiaocupacionalCentrodia1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terapiaocupacionalCentrodia1ButtonActionPerformed(evt);
            }
        });

        fisioterapiaCentrodia.setText("Fisioterapia");
        fisioterapiaCentrodia.setName("fisioterapiaCentrodia"); // NOI18N
        fisioterapiaCentrodia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fisioterapiaCentrodiaActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        comenzarButton.setText("Comenzar");
        comenzarButton.setActionCommand("jButton1");
        comenzarButton.setName("comenzarButton"); // NOI18N
        comenzarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comenzarButtonActionPerformed(evt);
            }
        });

        terapiaocupacionalCentrodia2Button.setText("Terapia ocupacional 2");
        terapiaocupacionalCentrodia2Button.setName("terapiaocupacionalCentrodia2Button"); // NOI18N
        terapiaocupacionalCentrodia2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terapiaocupacionalCentrodia2ButtonActionPerformed(evt);
            }
        });

        terapiaTextField.setName("terapiaTextField"); // NOI18N

        irAButton.setText("Ir a");
        irAButton.setName("irAButton"); // NOI18N
        irAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irAButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moviesPanelLayout = new javax.swing.GroupLayout(moviesPanel);
        moviesPanel.setLayout(moviesPanelLayout);
        moviesPanelLayout.setHorizontalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fisioterapiaLevesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(musicoterapiaLevesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lenguajeLevesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(musicoterapiaModeradosButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7)
                            .addComponent(lenguajeModeradosButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(terapiaocupacionalCentrodia2Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fisioterapiaCentrodia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8)
                            .addComponent(terapiaocupacionalCentrodia1Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(terapiaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irAButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                        .addComponent(comenzarButton)))
                .addContainerGap())
        );
        moviesPanelLayout.setVerticalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lenguajeLevesButton)
                    .addComponent(lenguajeModeradosButton)
                    .addComponent(terapiaocupacionalCentrodia1Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(musicoterapiaLevesButton)
                    .addComponent(musicoterapiaModeradosButton)
                    .addComponent(terapiaocupacionalCentrodia2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fisioterapiaLevesButton)
                    .addComponent(fisioterapiaCentrodia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(terapiaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(irAButton)
                    .addComponent(comenzarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sonidosPanel.setName("sonidosPanel"); // NOI18N

        jLabel10.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel10.setText("Sonidos");
        jLabel10.setName("jLabel10"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        sonidosDisponiblesList.setModel(new DefaultComboBoxModel(readSoundsFile()));
        sonidosDisponiblesList.setName("sonidosDisponiblesList"); // NOI18N
        sonidosDisponiblesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sonidosDisponiblesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sonidosDisponiblesList);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        sonidosReproduccionList.setName("sonidosReproduccionList"); // NOI18N
        sonidosReproduccionList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sonidosReproduccionListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(sonidosReproduccionList);

        jLabel12.setText("Lista de sonidos");
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel13.setText("Lista de reproduccion");
        jLabel13.setName("jLabel13"); // NOI18N

        sonidosVolumenSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        sonidosVolumenSlider.setValue(90);
        sonidosVolumenSlider.setName("sonidosVolumenSlider"); // NOI18N
        sonidosVolumenSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sonidosVolumenSliderMouseReleased(evt);
            }
        });

        jLabel14.setText("Volumen");
        jLabel14.setName("jLabel14"); // NOI18N

        javax.swing.GroupLayout sonidosPanelLayout = new javax.swing.GroupLayout(sonidosPanel);
        sonidosPanel.setLayout(sonidosPanelLayout);
        sonidosPanelLayout.setHorizontalGroup(
            sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sonidosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(sonidosPanelLayout.createSequentialGroup()
                        .addGroup(sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sonidosPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14))
                            .addGroup(sonidosPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sonidosVolumenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        sonidosPanelLayout.setVerticalGroup(
            sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sonidosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sonidosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sonidosVolumenSlider, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        movimientosPanel.setName("movimientosPanel"); // NOI18N

        jLabel11.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel11.setText("Movimientos");
        jLabel11.setName("jLabel11"); // NOI18N

        movimientosComboBox.setModel(new DefaultComboBoxModel(readMovementsFile()));
        movimientosComboBox.setName("movimientosComboBox"); // NOI18N
        movimientosComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movimientosComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movimientosPanelLayout = new javax.swing.GroupLayout(movimientosPanel);
        movimientosPanel.setLayout(movimientosPanelLayout);
        movimientosPanelLayout.setHorizontalGroup(
            movimientosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movimientosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(movimientosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movimientosComboBox, 0, 165, Short.MAX_VALUE)
                    .addComponent(jLabel11))
                .addContainerGap())
        );
        movimientosPanelLayout.setVerticalGroup(
            movimientosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movimientosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movimientosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        apagarRobotButton.setText("Apagar Robot");
        apagarRobotButton.setName("apagarRobotButton"); // NOI18N
        apagarRobotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarRobotButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(conexionRobotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cabezaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(apagarRobotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(14, 14, 14))
                            .addComponent(movimientosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(moviesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sonidosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conexionRobotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(movimientosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apagarRobotButton))
                    .addComponent(cabezaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moviesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sonidosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conexionRobotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conexionRobotButtonActionPerformed
        if (robotWrapper.isRobotConectado()) {
            try {
                robotWrapper.desconectar();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,
                        "Se ha producido un error al intentar desconectar\nel robot. " + ex.getMessage(),
                        "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } else if (robotWrapper.isRobotBuscando()) {
            // NO hacemos nada
            
        } else if (robotWrapper.isRobotDesconectado()) {
            Thread thread = new Thread(new Runnable() {

                public void run() {
                    String nombreRobot = conexionNombreTextField.getText();
                    int robotPort = Integer.parseInt(robotPortTextField.getText());
                    String sufijo = ".local";

                    try {
                        // Nombre del robot  
                        //if (!nombreRobot.endsWith(sufijo)) {
                        //    nombreRobot = nombreRobot.concat(sufijo);
                        //}

                        // Conexion con el robot
                        robotWrapper.conectar(nombreRobot, robotPort);

                        // Ajustar volumen
                        sonidosVolumenSlider.setValue(robotWrapper.getVolumen());

                    } catch (Exception ex) {
                        Logger.getLogger(FundacionCienApp.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(FundacionCienApp.this,
                                "Se ha producido un error al intentar conectarse\n"
                                + "al robot " + nombreRobot + "\n"
                                + "Por favor, revise que el robot esté encendido\n"
                                + "y la red funcione.",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
            thread.setDaemon(true);
            thread.start();
        }

        /*
        try {
            // Una prueba
            JmDNS jmdns = JmDNS.create();
            jmdns.addServiceListener("myServiceListener", new ServiceListener() {

                public void serviceAdded(ServiceEvent se) {
                    System.out.println("Service resolved: "
                     + se.getInfo().getQualifiedName()
                     + " port:" + se.getInfo().getPort());
                }

                public void serviceRemoved(ServiceEvent se) {
                    System.out.println("Service removed: " + se.getName());
                }

                public void serviceResolved(ServiceEvent se) {
                    System.out.println("ServiceResolved");
                }
            });

        } catch (IOException ex) {
            Logger.getLogger(FundacionCienApp.class.getName()).log(Level.SEVERE, null, ex);
        }
         */

    }//GEN-LAST:event_conexionRobotButtonActionPerformed

    private void movimientoSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movimientoSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            robotWrapper.andar(((float) movimientoSlider.getValue()) / 100.0f);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movimientoSliderMouseReleased

    private void movimientoLateralSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movimientoLateralSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            robotWrapper.andarLateral(((float) movimientoLateralSlider.getValue()) / 100.0f);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movimientoLateralSliderMouseReleased

    private void movimientoRotacionSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movimientoRotacionSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            robotWrapper.girar(((float) movimientoRotacionSlider.getValue()) / 100.0f);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movimientoRotacionSliderMouseReleased

    private void movimientoStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movimientoStopButtonActionPerformed
        try {
            robotWrapper.parar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movimientoStopButtonActionPerformed

    private void centrarCabezaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centrarCabezaButtonActionPerformed
        try {
            robotWrapper.movimientoCabezaLateral(0.0f);
            robotWrapper.movimientoCabezaVertical(0.0f);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_centrarCabezaButtonActionPerformed

    private void cabezaPanSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cabezaPanSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            robotWrapper.movimientoCabezaLateral(cabezaPanSlider.getValue());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cabezaPanSliderMouseReleased

    private void cabezaTiltSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cabezaTiltSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            robotWrapper.movimientoCabezaVertical(cabezaTiltSlider.getValue());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cabezaTiltSliderMouseReleased

    private void lenguajeLevesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lenguajeLevesButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/lenguajeI.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_lenguajeLevesButtonActionPerformed

    private void musicoterapiaLevesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicoterapiaLevesButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/musicoterapia.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_musicoterapiaLevesButtonActionPerformed

    private void fisioterapiaLevesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fisioterapiaLevesButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/fisioterapia.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fisioterapiaLevesButtonActionPerformed

    private void lenguajeModeradosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lenguajeModeradosButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/lenguajemoderado.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_lenguajeModeradosButtonActionPerformed

    private void musicoterapiaModeradosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicoterapiaModeradosButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/musicoterapia.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_musicoterapiaModeradosButtonActionPerformed

    private void comenzarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comenzarButtonActionPerformed
        try {
            if (comenzarButton.getText().equals("Comenzar")) {
                robotWrapper.ejecutarTerapia();
            } else if (comenzarButton.getText().equals("Siguiente")) {
                robotWrapper.pasoSiguiente();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_comenzarButtonActionPerformed

    private void wiimoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiimoteButtonActionPerformed
        try {
            if (wiimote.getEstado() == Wiimote.desconectado) {
                wiimote.buscarWiimote();

            } else if (wiimote.getEstado() == Wiimote.conectado) {
                wiimote.desconectar();

            } else if (wiimote.getEstado() == Wiimote.buscando) {
                wiimote.cancelarBusqueda();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con el wiimote.\n"
                    + "Intente conectarse de nuevo.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_wiimoteButtonActionPerformed

    private void terapiaocupacionalCentrodia1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terapiaocupacionalCentrodia1ButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/terapiaocupacional1.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_terapiaocupacionalCentrodia1ButtonActionPerformed

    private void fisioterapiaCentrodiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fisioterapiaCentrodiaActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/fisioterapiacentrodia.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fisioterapiaCentrodiaActionPerformed

    private void movimientosComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movimientosComboBoxActionPerformed
        try {
            JComboBox cb = (JComboBox) evt.getSource();
            String movementName = ((String) cb.getSelectedItem()).toLowerCase();
            robotWrapper.hacerMovimiento(movementName);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_movimientosComboBoxActionPerformed

    private void sonidosDisponiblesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonidosDisponiblesListMouseClicked
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            if (evt.getClickCount() == 2) {
                int index = sonidosDisponiblesList.locationToIndex(evt.getPoint());
                ListModel dlm = sonidosDisponiblesList.getModel();
                String item = (String) dlm.getElementAt(index);
                sonidosDisponiblesList.ensureIndexIsVisible(index);
                soundsQueue.addSound(item);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_sonidosDisponiblesListMouseClicked

    private void terapiaocupacionalCentrodia2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terapiaocupacionalCentrodia2ButtonActionPerformed
        try {
            JToggleButton toggleButton = (JToggleButton) evt.getSource();
            if (toggleButton.isSelected()) {
                robotWrapper.cargarTerapia("/home/nao/movie/terapiaocupacional2.movie");
            } else {
                robotWrapper.pararTerapia();
            }
            deselectTerapiaToggleButtonsExcept(toggleButton);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_terapiaocupacionalCentrodia2ButtonActionPerformed

    private void sonidosReproduccionListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonidosReproduccionListMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                int index = sonidosReproduccionList.locationToIndex(evt.getPoint());
                sonidosReproduccionList.ensureIndexIsVisible(index);
                System.out.println("Double clicked on " + index);
                soundsQueue.removeSound(index);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sonidosReproduccionListMouseClicked

    private void sonidosVolumenSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonidosVolumenSliderMouseReleased
        // Security check
        Component component = (Component)evt.getSource();
        if (!component.isEnabled()) return;

        try {
            JSlider slider = (JSlider) evt.getSource();
            robotWrapper.setVolumen(slider.getValue());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sonidosVolumenSliderMouseReleased

    private void irAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irAButtonActionPerformed
        try {
            robotWrapper.irALinea(Integer.parseInt(terapiaTextField.getText()));

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "El dato introducido no es número",
                    "ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (IndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "El numero introducido no es válido",
                    "ERROR", JOptionPane.ERROR_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "Intente conectarse de nuevo al robot.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_irAButtonActionPerformed

    private void apagarRobotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarRobotButtonActionPerformed
        try {
            int value = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que quiere apagar el robot?",
                    "El robot se va a apagar",
                    JOptionPane.YES_NO_OPTION);
            System.out.println(value);
            if (value==JOptionPane.YES_OPTION) {
                robotWrapper.apagarRobot();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(FundacionCienApp.this,
                    "Se ha producido un error con la conexión.\n"
                    + "No se ha podido apagar el robot correctamente",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_apagarRobotButtonActionPerformed

    private void conexionNombreTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conexionNombreTextFieldKeyReleased
        JTextField textField = (JTextField)evt.getSource();
        if (!textField.isEnabled()) return;
        
        currentTimerTask.cancel();
        timer.purge();
        currentTimerTask = new BuscarHostTimerTask(conexionNombreTextField.getText());
        timer.schedule(currentTimerTask, 0, 1000);
    }//GEN-LAST:event_conexionNombreTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FundacionCienApp().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apagarRobotButton;
    private javax.swing.JSlider cabezaPanSlider;
    private javax.swing.JPanel cabezaPanel;
    private javax.swing.JSlider cabezaTiltSlider;
    private javax.swing.JButton centrarCabezaButton;
    private javax.swing.JButton comenzarButton;
    private javax.swing.JTextField conexionNombreTextField;
    private javax.swing.JButton conexionRobotButton;
    private javax.swing.JLabel conexionRobotLabel;
    private javax.swing.JPanel conexionRobotPanel;
    private javax.swing.JProgressBar conexionRobotProgressBar;
    private javax.swing.JLabel conexionRobotTitle;
    private javax.swing.JToggleButton fisioterapiaCentrodia;
    private javax.swing.JToggleButton fisioterapiaLevesButton;
    private javax.swing.JButton irAButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton lenguajeLevesButton;
    private javax.swing.JToggleButton lenguajeModeradosButton;
    private javax.swing.JPanel moviesPanel;
    private javax.swing.JSlider movimientoLateralSlider;
    private javax.swing.JPanel movimientoPanel;
    private javax.swing.JSlider movimientoRotacionSlider;
    private javax.swing.JSlider movimientoSlider;
    private javax.swing.JButton movimientoStopButton;
    private javax.swing.JComboBox movimientosComboBox;
    private javax.swing.JPanel movimientosPanel;
    private javax.swing.JToggleButton musicoterapiaLevesButton;
    private javax.swing.JToggleButton musicoterapiaModeradosButton;
    private javax.swing.JTextField robotPortTextField;
    private javax.swing.JList sonidosDisponiblesList;
    private javax.swing.JPanel sonidosPanel;
    private javax.swing.JList sonidosReproduccionList;
    private javax.swing.JSlider sonidosVolumenSlider;
    private javax.swing.JTextField terapiaTextField;
    private javax.swing.JToggleButton terapiaocupacionalCentrodia1Button;
    private javax.swing.JToggleButton terapiaocupacionalCentrodia2Button;
    private javax.swing.JButton wiimoteButton;
    private javax.swing.JProgressBar wiimoteProgressBar;
    private javax.swing.JLabel wiimoteStatusLabel;
    // End of variables declaration//GEN-END:variables

    public void update(Observable o, Object o1) {
        if (o == robotWrapper) {
            // Body
            movimientoSlider.setValue((int) (robotWrapper.getBodyV() * 100));
            movimientoRotacionSlider.setValue((int) (robotWrapper.getBodyW() * 100));
            movimientoLateralSlider.setValue((int) (robotWrapper.getBodyL() * 100));

            // Head
            cabezaPanSlider.setValue((int) (robotWrapper.getHeadPan()));
            cabezaTiltSlider.setValue((int) (robotWrapper.getHeadTilt()));

            // Conexion
            if (robotWrapper.isRobotConectado()) {
                conexionRobotLabel.setText("Estado: Conectado");
                conexionRobotButton.setText("Desconectar");
                conexionRobotProgressBar.setIndeterminate(false);
                conexionRobotProgressBar.setValue(conexionRobotProgressBar.getMaximum());
                enableEverything(true);

            } else if (robotWrapper.isRobotBuscando()) {
                conexionRobotLabel.setText("Estado: Buscando");
                conexionRobotButton.setText("Cancelar");
                conexionRobotProgressBar.setIndeterminate(true);
                enableEverything(false);

            } else if (robotWrapper.isRobotDesconectado()) {
                conexionRobotLabel.setText("Estado: Desconectado");
                conexionRobotButton.setText("Conectar");
                conexionRobotProgressBar.setIndeterminate(false);
                conexionRobotProgressBar.setValue(conexionRobotProgressBar.getMinimum());
                enableEverything(false);
                deselectTerapiaToggleButtonsExcept(null);
                // Search for the host
                currentTimerTask.cancel();
                timer.purge();
                currentTimerTask = new BuscarHostTimerTask(conexionNombreTextField.getText());
                timer.schedule(currentTimerTask, 0, 1000);
            }

            // Terapia
            if (robotWrapper.getEstadoTerapia() == RobotWrapper.EstadoTerapia.cargada) {
                comenzarButton.setText("Comenzar");
                comenzarButton.setEnabled(true);
                irAButton.setEnabled(true);
                terapiaTextField.setEnabled(true);
            } else if (robotWrapper.getEstadoTerapia() == RobotWrapper.EstadoTerapia.ejecutando) {
                comenzarButton.setText("Siguiente");
                comenzarButton.setEnabled(true);
                irAButton.setEnabled(true);
                terapiaTextField.setEnabled(true);
            } else if (robotWrapper.getEstadoTerapia() == RobotWrapper.EstadoTerapia.parada) {
                comenzarButton.setText("Comenzar");
                comenzarButton.setEnabled(false);
                irAButton.setEnabled(false);
                terapiaTextField.setEnabled(false);
                terapiaTextField.setText("");
            }
        } else if (o == wiimote) {
            if (wiimote.getEstado() == Wiimote.conectado) {
                wiimoteStatusLabel.setText("Estado: Conectado");
                wiimoteButton.setText("Desconectar");
                wiimoteProgressBar.setIndeterminate(false);
                wiimoteProgressBar.setValue(wiimoteProgressBar.getMaximum());

            } else if (wiimote.getEstado() == Wiimote.buscando) {
                wiimoteStatusLabel.setText("Estado: Pulse 1 y 2");
                wiimoteButton.setText("Cancelar");
                wiimoteProgressBar.setIndeterminate(true);

            } else if (wiimote.getEstado() == Wiimote.desconectado) {
                wiimoteStatusLabel.setText("Estado: Desconectado");
                wiimoteButton.setText("Conectar");
                wiimoteProgressBar.setIndeterminate(false);
                wiimoteProgressBar.setValue(wiimoteProgressBar.getMinimum());
            }
        } else if (o == soundsQueue) {
            sonidosReproduccionList.setModel(new DefaultComboBoxModel(soundsQueue.getQueue()));
        }
    }

    private String[] readSoundsFile() {
        File file = new File("conf/sounds.conf");
        List<String> out = new ArrayList<String>();

        try {
            BufferedReader bis = new BufferedReader(new FileReader(file));
            String line = null;

            while ((line = bis.readLine()) != null) {
                // Ignorar comentarios
                if (line.startsWith("#")) {
                    continue;
                }
                // Ignorar líneas en blanco
                if (line.isEmpty()) {
                    continue;
                }
                // Añadir elementos a la lista
                out.add(line);
                //System.out.println("Añadiendo " + line + " a la lista de sonidos");
            }

            bis.close();


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();


        } finally {
            return out.toArray(new String[out.size()]);
        }
    }

    private String[] readMovementsFile() {
        File file = new File("conf/movements.conf");
        List<String> out = new ArrayList<String>();

        try {
            BufferedReader bis = new BufferedReader(new FileReader(file));
            String line = null;

            while ((line = bis.readLine()) != null) {
                // Ignorar comentarios
                if (line.startsWith("#")) {
                    continue;
                }
                // Ignorar líneas en blanco
                if (line.isEmpty()) {
                    continue;
                }
                // Añadir elementos a la lista
                out.add(line);
                //System.out.println("Añadiendo " + line + " a la lista de movimientos");
            }

            bis.close();


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();


        } finally {
            return out.toArray(new String[out.size()]);
        }
    }

    private void enableEverything(boolean enable) {
        // Body
        movimientoSlider.setEnabled(enable);
        movimientoLateralSlider.setEnabled(enable);
        movimientoRotacionSlider.setEnabled(enable);
        movimientoStopButton.setEnabled(enable);

        // Head
        cabezaPanSlider.setEnabled(enable);
        cabezaTiltSlider.setEnabled(enable);
        centrarCabezaButton.setEnabled(enable);

        // Terapias
        lenguajeLevesButton.setEnabled(enable);
        musicoterapiaLevesButton.setEnabled(enable);
        fisioterapiaLevesButton.setEnabled(enable);
        lenguajeModeradosButton.setEnabled(enable);
        musicoterapiaModeradosButton.setEnabled(enable);
        terapiaocupacionalCentrodia1Button.setEnabled(enable);
        terapiaocupacionalCentrodia2Button.setEnabled(enable);
        fisioterapiaCentrodia.setEnabled(enable);
        comenzarButton.setEnabled(enable);
        irAButton.setEnabled(enable);
        terapiaTextField.setEnabled(enable);

        // Sonidos
        sonidosDisponiblesList.setEnabled(enable);
        sonidosReproduccionList.setEnabled(enable);
        sonidosVolumenSlider.setEnabled(enable);

        // Movimientos
        movimientosComboBox.setEnabled(enable);

        // Wiimote
        wiimoteButton.setEnabled(enable);

        // Apagar robot
        apagarRobotButton.setEnabled(enable);
    }

    public void deselectTerapiaToggleButtonsExcept(JToggleButton tb) {
        if (tb != lenguajeLevesButton) {
            lenguajeLevesButton.setSelected(false);
        }
        if (tb != musicoterapiaLevesButton) {
            musicoterapiaLevesButton.setSelected(false);
        }
        if (tb != fisioterapiaLevesButton) {
            fisioterapiaLevesButton.setSelected(false);
        }
        if (tb != musicoterapiaModeradosButton) {
            musicoterapiaModeradosButton.setSelected(false);
        }
        if (tb != terapiaocupacionalCentrodia1Button) {
            terapiaocupacionalCentrodia1Button.setSelected(false);
        }
        if (tb != terapiaocupacionalCentrodia2Button) {
            terapiaocupacionalCentrodia2Button.setSelected(false);
        }
        if (tb != fisioterapiaCentrodia) {
            fisioterapiaCentrodia.setSelected(false);
        }
    }

    private final class BuscarHostTimerTask extends TimerTask {

        private String host;
        private String sufijo = ".local";

        public BuscarHostTimerTask(String host) {
            if (host.endsWith(sufijo)) {
                this.host = host;
            } else {
                this.host = host.concat(".local");
            }
        }
        
        @Override
        public void run() {
            try {
                InetAddress[] inetAddresses = InetAddress.getAllByName(host);
                this.cancel();
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        //FundacionCienApp.this.conexionNombreTextField.setBackground(Color.green);
                    }
                });
            } catch (UnknownHostException ex) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        //FundacionCienApp.this.conexionNombreTextField.setBackground(Color.red);
                    }
                });
            }
        }
        
    }

}




