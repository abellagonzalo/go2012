/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ComponentPerceptionPanel.java
 *
 * Created on 28-oct-2009, 13:08:37
 */
package jmanager.components;

import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import jmanager.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import bica.*;


/**
 *
 * @author paco
 */
public class Obstacles extends javax.swing.JPanel {
	private int ccpixelStride = 3;

	/** Creates new form ComponentGTLocalization */
	public Obstacles() {
		initComponents();
		bebugTimes1.setParentId("Obstacles");
	}

	public void refresh() {

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		ActivationCheckBox = new javax.swing.JCheckBox();
		ColorCB = new javax.swing.JComboBox();
		getObstaclesButton = new javax.swing.JButton();
		ObsImgLabel = new javax.swing.JLabel();
		bebugTimes1 = new jmanager.components.BebugTimes();

		setMinimumSize(new java.awt.Dimension(330, 250));
		setName("Form"); // NOI18N
		setPreferredSize(new java.awt.Dimension(330, 250));

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Obstacles.class);
		ActivationCheckBox.setText(resourceMap.getString("ActivationCheckBox.text")); // NOI18N
		ActivationCheckBox.setName("ActivationCheckBox"); // NOI18N
		ActivationCheckBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ActivationCheckBoxActionPerformed(evt);
			}
		});

		ColorCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Red", "Blue" }));
		ColorCB.setName("ColorCB"); // NOI18N

		getObstaclesButton.setText(resourceMap.getString("getObstaclesButton.text")); // NOI18N
		getObstaclesButton.setName("getObstaclesButton"); // NOI18N
		getObstaclesButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				getObstaclesButtonMouseClicked(evt);
			}
		});

		ObsImgLabel.setBackground(resourceMap.getColor("ObsImgLabel.background")); // NOI18N
		ObsImgLabel.setForeground(resourceMap.getColor("ObsImgLabel.foreground")); // NOI18N
		ObsImgLabel.setDoubleBuffered(true);
		ObsImgLabel.setMaximumSize(new java.awt.Dimension(320, 240));
		ObsImgLabel.setMinimumSize(new java.awt.Dimension(320, 240));
		ObsImgLabel.setName("ObsImgLabel"); // NOI18N
		ObsImgLabel.setOpaque(true);
		ObsImgLabel.setPreferredSize(new java.awt.Dimension(320, 240));

		bebugTimes1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		bebugTimes1.setName("bebugTimes1"); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(ActivationCheckBox)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(getObstaclesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(ColorCB, 0, 106, Short.MAX_VALUE))
												.addGap(33, 33, 33)
												.addComponent(ObsImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(bebugTimes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addContainerGap(178, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addContainerGap()
										.addComponent(ActivationCheckBox)
										.addGap(36, 36, 36)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(ObsImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(layout.createSequentialGroup()
														.addComponent(ColorCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(getObstaclesButton))))
														.addGroup(layout.createSequentialGroup()
																.addGap(45, 45, 45)
																.addComponent(bebugTimes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addContainerGap(252, Short.MAX_VALUE))
		);
	}// </editor-fold>//GEN-END:initComponents

	private void ActivationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActivationCheckBoxActionPerformed
		if (ActivationCheckBox.isSelected()) {
			JmanagerView.root.getConnection().schedulerPrx.run("Obstacles");
			//dataResp resp = JmanagerView.root.getConnection().send("run:Obstacles:");

			/*try {
				Thread.sleep(3000);
			} catch (InterruptedException ex) {
				Logger.getLogger(Obstacles.class.getName()).log(Level.SEVERE, null, ex);
			}*/

		} else {
			JmanagerView.root.getConnection().schedulerPrx.stop("Obstacles");
			//dataResp resp = JmanagerView.root.getConnection().send("pause:Obstacles:");
			//printResp(resp);
		}

	}//GEN-LAST:event_ActivationCheckBoxActionPerformed

	private void getObstaclesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getObstaclesButtonMouseClicked
		if (ActivationCheckBox.isSelected()) {
			int w = 320, h = 240;
			int pixelStride = 3; //assuming r, g, b, skip, r, g, b, skip...
			ImageData data = null;
			
			//SRC Image
			//data = JmanagerView.root.getConnection().obstaclesPrx.getDbgImg();
			//dataResp resp = JmanagerView.root.getConnection().sendImage("Obstacles:img:", w, h, pixelStride);

			//if (resp.size < (w * h * 3)) {
			//	System.out.println("Pocos datos para formar una imagen: " + resp.size + " deberÃ­a ser: " + (w * h * 3));
			//	return;
			//}

			//byte[] dimg = DoubleSizeImg(resp.data, w, h);

			// stored for save in disk if it is required
			BufferedImage bi = toImage(w, h, data.pixelData);

			displayImageInLabel(data.pixelData, ObsImgLabel, w, h, pixelStride);        }
	}//GEN-LAST:event_getObstaclesButtonMouseClicked
	/**/
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox ActivationCheckBox;
	private javax.swing.JComboBox ColorCB;
	private javax.swing.JLabel ObsImgLabel;
	private jmanager.components.BebugTimes bebugTimes1;
	private javax.swing.JButton getObstaclesButton;
	// End of variables declaration//GEN-END:variables

	public void displayImageInLabel(byte[] dataImg, JLabel label, int w, int h, int pixelStride) {

		int[] bandOffsets = {2, 1, 0}; //b, g, r
		int scanlineStride = 3 * w; //no extra padding
		DataBuffer buffer = new DataBufferByte(dataImg, w * h);
		WritableRaster raster = Raster.createInterleavedRaster(buffer, w, h, scanlineStride, pixelStride, bandOffsets, null);

		ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);
		boolean hasAlpha = false;
		boolean isAlphaPremultiplied = false;
		int transparency = Transparency.OPAQUE;
		int transferType = DataBuffer.TYPE_BYTE;
		ColorModel colorModel = new ComponentColorModel(colorSpace, hasAlpha, isAlphaPremultiplied, transparency, transferType);

		BufferedImage img = new BufferedImage(colorModel, raster, isAlphaPremultiplied, null);

		//Display image to the label
		ImageIcon icon = new ImageIcon(img);
		label.setIcon(icon);
	}

	private byte[] DoubleSizeImg(byte[] dataImgSrc, int wSrc, int hSrc) {
		byte[] ret = new byte[(wSrc * 2) * (hSrc * 2) * ccpixelStride];

		for (int y = 0; y < hSrc; y++) {
			for (int x = 0; x < wSrc; x++) {
				int x1, y1, x2, y2, x3, y3, x4, y4;

				x1 = 2 * x;
				y1 = 2 * y;
				x2 = 2 * x + 1;
				y2 = 2 * y;
				x3 = 2 * x;
				y3 = 2 * y + 1;
				x4 = 2 * x + 1;
				y4 = 2 * y + 1;


				ret[((y1 * wSrc * 2 + x1) * 3)] = dataImgSrc[(y * wSrc + x) * 3];
				ret[((y1 * wSrc * 2 + x1) * 3) + 1] = dataImgSrc[(y * wSrc + x) * 3 + 1];
				ret[((y1 * wSrc * 2 + x1) * 3) + 2] = dataImgSrc[(y * wSrc + x) * 3 + 2];
				ret[((y2 * wSrc * 2 + x2) * 3)] = dataImgSrc[(y * wSrc + x) * 3];
				ret[((y2 * wSrc * 2 + x2) * 3) + 1] = dataImgSrc[(y * wSrc + x) * 3 + 1];
				ret[((y2 * wSrc * 2 + x2) * 3) + 2] = dataImgSrc[(y * wSrc + x) * 3 + 2];
				ret[((y3 * wSrc * 2 + x3) * 3)] = dataImgSrc[(y * wSrc + x) * 3];
				ret[((y3 * wSrc * 2 + x3) * 3) + 1] = dataImgSrc[(y * wSrc + x) * 3 + 1];
				ret[((y3 * wSrc * 2 + x3) * 3) + 2] = dataImgSrc[(y * wSrc + x) * 3 + 2];
				ret[((y4 * wSrc * 2 + x4) * 3)] = dataImgSrc[(y * wSrc + x) * 3];
				ret[((y4 * wSrc * 2 + x4) * 3) + 1] = dataImgSrc[(y * wSrc + x) * 3 + 1];
				ret[((y4 * wSrc * 2 + x4) * 3) + 2] = dataImgSrc[(y * wSrc + x) * 3 + 2];
			}
		}


		return ret;

	}

	private static BufferedImage toImage(int w, int h, byte[] data) {
		DataBuffer buffer = new DataBufferByte(data, w * h);

		int pixelStride = 3;
		int scanlineStride = 3 * w; //no extra padding
		int[] bandOffsets = {2, 1, 0}; //r, g, b
		WritableRaster raster = Raster.createInterleavedRaster(buffer, w, h, scanlineStride, pixelStride, bandOffsets, null);

		ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);
		boolean hasAlpha = false;
		boolean isAlphaPremultiplied = false;
		int transparency = Transparency.OPAQUE;
		int transferType = DataBuffer.TYPE_BYTE;
		ColorModel colorModel = new ComponentColorModel(colorSpace, hasAlpha, isAlphaPremultiplied, transparency, transferType);

		return new BufferedImage(colorModel, raster, isAlphaPremultiplied, null);
	}
}