/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerceptionPanel.java
 *
 * Created on 28-oct-2009, 13:08:37
 */
package jmanager.components;

import jmanager.*;

import bica.*;

import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import jmanager.components.HSVFilterPanel.FilterChangedEvent;

/**
 *
 * @author paco
 */
public class PerceptionPanel extends javax.swing.JPanel implements HSVFilterPanel.FilterChangedListener {

    private CameraConfFrame cameraConfFrame = new CameraConfFrame();
    //Color disk240
    private int ccw = 300;
    private int cch = 300;
    private int imgw = 320;
    private int imgh = 240;
    private int imgc = 3;
    private double[] hsvimage = new double[imgw * imgh * imgc];
    private byte[] masc = new byte[ccw * cch];
    private byte[] receivedImg = new byte[imgw * imgh * 3];

    /** Creates new form PerceptionPanel */
    public PerceptionPanel() {
        //try {
            initComponents();

            //JmanagerView.root.getConnection().perceptionPrx.setCam(getSelectedCameraType());
            //updateImage();
            //updateHSVImage();
            //updateHSVMap();

            hSVFilterPanel21.addHSVFilterChangedListener(this);
            
        //} catch (DataNotExistException ex) {
        //    Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
        //} catch (HardwareFailedException ex) {
        //    Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
        //}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CameraSelectorCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        CaptureButton = new javax.swing.JButton();
        SrcImgLabel = new javax.swing.JLabel();
        SelectObjectComboBox = new javax.swing.JComboBox();
        VideoCheckBox = new javax.swing.JCheckBox();
        CameraSetupButton = new javax.swing.JButton();
        SavePcButton = new javax.swing.JButton();
        LoadPcButton = new javax.swing.JButton();
        loadExtImgButton = new javax.swing.JButton();
        jSaveImageButton = new javax.swing.JButton();
        hSVFilterPanel21 = new jmanager.components.HSVFilterPanel();

        setMinimumSize(new java.awt.Dimension(330, 250));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(330, 250));

        CameraSelectorCB.setModel(new javax.swing.DefaultComboBoxModel(CameraType.values()));
        CameraSelectorCB.setSelectedItem(CameraType.LOWERCAMERA);
        CameraSelectorCB.setName("CameraSelectorCB"); // NOI18N
        CameraSelectorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CameraSelectorCBActionPerformed(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PerceptionPanel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        CaptureButton.setText(resourceMap.getString("CaptureButton.text")); // NOI18N
        CaptureButton.setName("CaptureButton"); // NOI18N
        CaptureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaptureButtonActionPerformed(evt);
            }
        });

        SrcImgLabel.setBackground(resourceMap.getColor("SrcImgLabel.background")); // NOI18N
        SrcImgLabel.setForeground(resourceMap.getColor("SrcImgLabel.foreground")); // NOI18N
        SrcImgLabel.setText(resourceMap.getString("SrcImgLabel.text")); // NOI18N
        SrcImgLabel.setDoubleBuffered(true);
        SrcImgLabel.setMaximumSize(new java.awt.Dimension(320, 240));
        SrcImgLabel.setMinimumSize(new java.awt.Dimension(320, 240));
        SrcImgLabel.setName("SrcImgLabel"); // NOI18N
        SrcImgLabel.setOpaque(true);
        SrcImgLabel.setPreferredSize(new java.awt.Dimension(320, 240));
        SrcImgLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SrcImgLabelMouseClicked(evt);
            }
        });
        SrcImgLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                SrcImgLabelMouseMoved(evt);
            }
        });

        SelectObjectComboBox.setModel(new javax.swing.DefaultComboBoxModel(FeaturesType.values()));
        SelectObjectComboBox.setName("SelectObjectComboBox"); // NOI18N
        SelectObjectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectObjectComboBoxActionPerformed(evt);
            }
        });

        VideoCheckBox.setText(resourceMap.getString("VideoCheckBox.text")); // NOI18N
        VideoCheckBox.setName("VideoCheckBox"); // NOI18N
        VideoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VideoCheckBoxActionPerformed(evt);
            }
        });

        CameraSetupButton.setText(resourceMap.getString("CameraSetupButton.text")); // NOI18N
        CameraSetupButton.setName("CameraSetupButton"); // NOI18N
        CameraSetupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CameraSetupButtonActionPerformed(evt);
            }
        });

        SavePcButton.setText(resourceMap.getString("SavePcButton.text")); // NOI18N
        SavePcButton.setName("SavePcButton"); // NOI18N
        SavePcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavePcButtonActionPerformed(evt);
            }
        });

        LoadPcButton.setText(resourceMap.getString("LoadPcButton.text")); // NOI18N
        LoadPcButton.setName("LoadPcButton"); // NOI18N
        LoadPcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadPcButtonActionPerformed(evt);
            }
        });

        loadExtImgButton.setText(resourceMap.getString("loadExtImgButton.text")); // NOI18N
        loadExtImgButton.setName("loadExtImgButton"); // NOI18N
        loadExtImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExtImgActionPerformed(evt);
            }
        });

        jSaveImageButton.setText(resourceMap.getString("jSaveImageButton.text")); // NOI18N
        jSaveImageButton.setName("jSaveImageButton"); // NOI18N
        jSaveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageActionPerformed(evt);
            }
        });

        hSVFilterPanel21.setName("hSVFilterPanel21"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CameraSelectorCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(hSVFilterPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SelectObjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CaptureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VideoCheckBox)
                    .addComponent(CameraSetupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SavePcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadPcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadExtImgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSaveImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(SrcImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CameraSelectorCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SelectObjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(CaptureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(VideoCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(CameraSetupButton)
                        .addGap(6, 6, 6)
                        .addComponent(SavePcButton)
                        .addGap(6, 6, 6)
                        .addComponent(LoadPcButton)
                        .addGap(6, 6, 6)
                        .addComponent(loadExtImgButton)
                        .addGap(7, 7, 7)
                        .addComponent(jSaveImageButton))
                    .addComponent(SrcImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hSVFilterPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void CameraSelectorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CameraSelectorCBActionPerformed
            JmanagerView.root.getConnection().perceptionPrx.setCam(getSelectedCameraType());
	}//GEN-LAST:event_CameraSelectorCBActionPerformed

	private void VideoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VideoCheckBoxActionPerformed
            throw new UnsupportedOperationException("Video operation not supported yet");
	}//GEN-LAST:event_VideoCheckBoxActionPerformed

	private void CameraSetupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CameraSetupButtonActionPerformed
            cameraConfFrame.setVisible(true);
	}//GEN-LAST:event_CameraSetupButtonActionPerformed

	private void SrcImgLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SrcImgLabelMouseClicked
	}//GEN-LAST:event_SrcImgLabelMouseClicked

	private void SavePcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavePcButtonActionPerformed
            dataResp resp = JmanagerView.root.getConnection().send("getAllHSVFilters:");
            printResp(resp);
            String[] levels = new String(resp.data).split(":");

            //Orange Ball Upper Camera
            float ballhU = Float.parseFloat(levels[0]) / 100;
            float ballHU = Float.parseFloat(levels[1]) / 100;
            float ballsU = Float.parseFloat(levels[2]) / 100;
            float ballSU = Float.parseFloat(levels[3]) / 100;
            float ballvU = Float.parseFloat(levels[4]) / 100;
            float ballVU = Float.parseFloat(levels[5]) / 100;

            //Blue Net Upper Camera
            float bnethU = Float.parseFloat(levels[6]) / 100;
            float bnetHU = Float.parseFloat(levels[7]) / 100;
            float bnetsU = Float.parseFloat(levels[8]) / 100;
            float bnetSU = Float.parseFloat(levels[9]) / 100;
            float bnetvU = Float.parseFloat(levels[10]) / 100;
            float bnetVU = Float.parseFloat(levels[11]) / 100;

            //Yellow Net Upper Camera
            float ynethU = Float.parseFloat(levels[12]) / 100;
            float ynetHU = Float.parseFloat(levels[13]) / 100;
            float ynetsU = Float.parseFloat(levels[14]) / 100;
            float ynetSU = Float.parseFloat(levels[15]) / 100;
            float ynetvU = Float.parseFloat(levels[16]) / 100;
            float ynetVU = Float.parseFloat(levels[17]) / 100;

            //Carpet Upper Camera
            float carphU = Float.parseFloat(levels[18]) / 100;
            float carpHU = Float.parseFloat(levels[19]) / 100;
            float carpsU = Float.parseFloat(levels[20]) / 100;
            float carpSU = Float.parseFloat(levels[21]) / 100;
            float carpvU = Float.parseFloat(levels[22]) / 100;
            float carpVU = Float.parseFloat(levels[23]) / 100;

            //White Upper Camera
            float whithU = Float.parseFloat(levels[24]) / 100;
            float whitHU = Float.parseFloat(levels[25]) / 100;
            float whitsU = Float.parseFloat(levels[26]) / 100;
            float whitSU = Float.parseFloat(levels[27]) / 100;
            float whitvU = Float.parseFloat(levels[28]) / 100;
            float whitVU = Float.parseFloat(levels[29]) / 100;

            //Cyan Upper Camera
            float cyanhU = Float.parseFloat(levels[30]) / 100;
            float cyanHU = Float.parseFloat(levels[31]) / 100;
            float cyansU = Float.parseFloat(levels[32]) / 100;
            float cyanSU = Float.parseFloat(levels[33]) / 100;
            float cyanvU = Float.parseFloat(levels[34]) / 100;
            float cyanVU = Float.parseFloat(levels[35]) / 100;

            // Magenta Upper Camera
            float magehU = Float.parseFloat(levels[36]) / 100;
            float mageHU = Float.parseFloat(levels[37]) / 100;
            float magesU = Float.parseFloat(levels[38]) / 100;
            float mageSU = Float.parseFloat(levels[39]) / 100;
            float magevU = Float.parseFloat(levels[40]) / 100;
            float mageVU = Float.parseFloat(levels[41]) / 100;

            //Orange Ball Lower Camera
            float ballhL = Float.parseFloat(levels[42]) / 100;
            float ballHL = Float.parseFloat(levels[43]) / 100;
            float ballsL = Float.parseFloat(levels[44]) / 100;
            float ballSL = Float.parseFloat(levels[45]) / 100;
            float ballvL = Float.parseFloat(levels[46]) / 100;
            float ballVL = Float.parseFloat(levels[47]) / 100;

            //Blue Net Lower Camera
            float bnethL = Float.parseFloat(levels[48]) / 100;
            float bnetHL = Float.parseFloat(levels[49]) / 100;
            float bnetsL = Float.parseFloat(levels[50]) / 100;
            float bnetSL = Float.parseFloat(levels[51]) / 100;
            float bnetvL = Float.parseFloat(levels[52]) / 100;
            float bnetVL = Float.parseFloat(levels[53]) / 100;
            //Yellow Net Lower Camera
            float ynethL = Float.parseFloat(levels[54]) / 100;
            float ynetHL = Float.parseFloat(levels[55]) / 100;
            float ynetsL = Float.parseFloat(levels[56]) / 100;
            float ynetSL = Float.parseFloat(levels[57]) / 100;
            float ynetvL = Float.parseFloat(levels[58]) / 100;
            float ynetVL = Float.parseFloat(levels[59]) / 100;

            //Carpet Lower Camera
            float carphL = Float.parseFloat(levels[60]) / 100;
            float carpHL = Float.parseFloat(levels[61]) / 100;
            float carpsL = Float.parseFloat(levels[62]) / 100;
            float carpSL = Float.parseFloat(levels[63]) / 100;
            float carpvL = Float.parseFloat(levels[64]) / 100;
            float carpVL = Float.parseFloat(levels[65]) / 100;

            //White Lower Camera
            float whithL = Float.parseFloat(levels[66]) / 100;
            float whitHL = Float.parseFloat(levels[67]) / 100;
            float whitsL = Float.parseFloat(levels[68]) / 100;
            float whitSL = Float.parseFloat(levels[69]) / 100;
            float whitvL = Float.parseFloat(levels[70]) / 100;
            float whitVL = Float.parseFloat(levels[71]) / 100;

            //Cyan Lower Camera
            float cyanhL = Float.parseFloat(levels[72]) / 100;
            float cyanHL = Float.parseFloat(levels[73]) / 100;
            float cyansL = Float.parseFloat(levels[74]) / 100;
            float cyanSL = Float.parseFloat(levels[75]) / 100;
            float cyanvL = Float.parseFloat(levels[76]) / 100;
            float cyanVL = Float.parseFloat(levels[77]) / 100;

            //Magenta Lower Camera
            float magehL = Float.parseFloat(levels[78]) / 100;
            float mageHL = Float.parseFloat(levels[79]) / 100;
            float magesL = Float.parseFloat(levels[80]) / 100;
            float mageSL = Float.parseFloat(levels[81]) / 100;
            float magevL = Float.parseFloat(levels[82]) / 100;
            float mageVL = Float.parseFloat(levels[83]) / 100;

            try {
                List<PrintWriter> printWriterList = new ArrayList<PrintWriter>();
                PrintWriter upper = new PrintWriter(new FileWriter(new String("/tmp/colorHSVupper.conf")));
                PrintWriter lower = new PrintWriter(new FileWriter(new String("/tmp/colorHSVlower.conf")));
                printWriterList.add(upper);
                printWriterList.add(lower);

                for (PrintWriter printWriter : printWriterList) {
                    printWriter.println("ORANGE_HMIN = " + ballhU);
                    printWriter.println("ORANGE_HMAX = " + ballHU);
                    printWriter.println("ORANGE_SMIN = " + ballsU);
                    printWriter.println("ORANGE_SMAX = " + ballSU);
                    printWriter.println("ORANGE_VMIN = " + ballvU);
                    printWriter.println("ORANGE_VMAX = " + ballVU);

                    printWriter.println("BLUE_HMIN = " + bnethU);
                    printWriter.println("BLUE_HMAX = " + bnetHU);
                    printWriter.println("BLUE_SMIN = " + bnetsU);
                    printWriter.println("BLUE_SMAX = " + bnetSU);
                    printWriter.println("BLUE_VMIN = " + bnetvU);
                    printWriter.println("BLUE_VMAX = " + bnetVU);

                    printWriter.println("YELLOW_HMIN = " + ynethU);
                    printWriter.println("YELLOW_HMAX = " + ynetHU);
                    printWriter.println("YELLOW_SMIN = " + ynetsU);
                    printWriter.println("YELLOW_SMAX = " + ynetSU);
                    printWriter.println("YELLOW_VMIN = " + ynetvU);
                    printWriter.println("YELLOW_VMAX = " + ynetVU);

                    printWriter.println("GREEN_HMIN = " + carphU);
                    printWriter.println("GREEN_HMAX = " + carpHU);
                    printWriter.println("GREEN_SMIN = " + carpsU);
                    printWriter.println("GREEN_SMAX = " + carpSU);
                    printWriter.println("GREEN_VMIN = " + carpvU);
                    printWriter.println("GREEN_VMAX = " + carpVU);

                    printWriter.println("WHITE_HMIN = " + whithU);
                    printWriter.println("WHITE_HMAX = " + whitHU);
                    printWriter.println("WHITE_SMIN = " + whitsU);
                    printWriter.println("WHITE_SMAX = " + whitSU);
                    printWriter.println("WHITE_VMIN = " + whitvU);
                    printWriter.println("WHITE_VMAX = " + whitVU);

                    printWriter.println("CYAN_HMIN = " + cyanhU);
                    printWriter.println("CYAN_HMAX = " + cyanHU);
                    printWriter.println("CYAN_SMIN = " + cyansU);
                    printWriter.println("CYAN_SMAX = " + cyanSU);
                    printWriter.println("CYAN_VMIN = " + cyanvU);
                    printWriter.println("CYAN_VMAX = " + cyanVU);

                    printWriter.println("MAGENTA_HMIN = " + magehU);
                    printWriter.println("MAGENTA_HMAX = " + mageHU);
                    printWriter.println("MAGENTA_SMIN = " + magesU);
                    printWriter.println("MAGENTA_SMAX = " + mageSU);
                    printWriter.println("MAGENTA_VMIN = " + magevU);
                    printWriter.println("MAGENTA_VMAX = " + mageVU);
                    printWriter.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
	}//GEN-LAST:event_SavePcButtonActionPerformed

	private void LoadPcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadPcButtonActionPerformed
            try {
                List<BufferedReader> readerList = new ArrayList<BufferedReader>();
                BufferedReader upper = new BufferedReader(new FileReader(new String("/tmp/colorHSVupper.conf")));
                BufferedReader lower = new BufferedReader(new FileReader(new String("/tmp/colorHSVlower.conf")));
                readerList.add(upper);
                readerList.add(lower);

                String filters = "";
                for (BufferedReader reader : readerList) {
                    for (int i = 0; i < 5; i++) {
                        for (int j = 0; j < 6; j++) {
                            filters = filters + ":" + (int) (Float.parseFloat(upper.readLine().split("=")[1]) * 100.0);
                        }
                    }
                    reader.close();
                }


            } catch (FileNotFoundException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
	}//GEN-LAST:event_LoadPcButtonActionPerformed

	private void loadExtImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadExtImgActionPerformed
            //try {
                final JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog(PerceptionPanel.this);

                if (returnVal == JFileChooser.APPROVE_OPTION) {

                    File file = fc.getSelectedFile();
                    try {
                        //Send the external image to robot
                        JmanagerView.root.getConnection().sendExtImage(getBytesFromFile(file));

                    } catch (IOException ex) {
                        Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //displayImageSrc();

                } else {
                    System.out.println("Open command cancelled by user.");
                }

            //} catch (DataNotExistException ex) {
            //    Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (HardwareFailedException ex) {
            //    Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            //}

	}//GEN-LAST:event_loadExtImgActionPerformed

	private void saveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageActionPerformed
            final JFileChooser fc = new JFileChooser();
            int returnVal = fc.showSaveDialog(PerceptionPanel.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                //Store in .ppm format
                try {
                    FileOutputStream fos = new FileOutputStream(fc.getSelectedFile());
                    fos.write(new String("P6\n").getBytes());
                    fos.write(new String("320 240\n").getBytes());
                    fos.write(new String("255\n").getBytes());
                    for (int i = 0; i
                            < imgw * imgh; i++) {
                        fos.write((byte) receivedImg[i * 3 + 2]);
                        fos.write((byte) receivedImg[i * 3 + 1]);
                        fos.write((byte) receivedImg[i * 3]);
                    }
                    fos.close();
                } catch (FileNotFoundException e) {
                    System.err.println("Error opening PPM file, write image cancelled.");
                } catch (IOException e) {
                    System.err.println("Error writing PPM file, write image cancelled.");
                }
            }
	}//GEN-LAST:event_saveImageActionPerformed

        private void CaptureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaptureButtonActionPerformed
            try {
                updateImage();
                updateHSVImage();
                updateHSVMap();

            } catch (DataNotExistException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (HardwareFailedException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//GEN-LAST:event_CaptureButtonActionPerformed

        private void SelectObjectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectObjectComboBoxActionPerformed
            try {
                updateImage();
                updateHSVImage();
                updateHSVMap();

            } catch (DataNotExistException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (HardwareFailedException ex) {
                Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//GEN-LAST:event_SelectObjectComboBoxActionPerformed

        private void SrcImgLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SrcImgLabelMouseMoved
            	double h = hsvimage[((int) evt.getY() * imgw + (int) evt.getX()) * 3];
		double s = hsvimage[((int) evt.getY() * imgw + (int) getX()) * 3 + 1];
		double v = hsvimage[((int) evt.getY() * imgw + (int) getX()) * 3 + 2];
                hSVFilterPanel21.drawRedSquareInHSVValue(h, s, v);
        }//GEN-LAST:event_SrcImgLabelMouseMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CameraSelectorCB;
    private javax.swing.JButton CameraSetupButton;
    private javax.swing.JButton CaptureButton;
    private javax.swing.JButton LoadPcButton;
    private javax.swing.JButton SavePcButton;
    private javax.swing.JComboBox SelectObjectComboBox;
    private javax.swing.JLabel SrcImgLabel;
    private javax.swing.JCheckBox VideoCheckBox;
    private jmanager.components.HSVFilterPanel hSVFilterPanel21;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jSaveImageButton;
    private javax.swing.JButton loadExtImgButton;
    // End of variables declaration//GEN-END:variables

    private void printResp(dataResp r) {
        //sbyte[] util = new byte[r.size];
        if (r.size < 500) {
            System.out.println("Respuesta: [" + new String(r.data) + "] (" + r.size + ")");
        } else {
            System.out.println("Respuesta: [X] (" + r.size + ")");
        }
    }

    /**
     * Helper method. Displays image in label.
     * @throws DataNotExistException 
     * @throws HardwareFailedException
     */
    private void updateImage() throws DataNotExistException, HardwareFailedException {
        bica.ImageData data = JmanagerView.root.getConnection().perceptionPrx.getImageDataWithFeatures(getSelectedFeatureType());

        // Stored for save in disk if it is required
        System.arraycopy(data.pixelData, 0, receivedImg, 0, imgw * imgh * imgc);

        int[] bandOffsets = {2, 1, 0}; //b, g, r

        int scanlineStride = 3 * imgw; //no extra padding
        DataBuffer buffer = new DataBufferByte(data.pixelData, imgw * imgh);
        WritableRaster raster = Raster.createInterleavedRaster(buffer, imgw, imgh, scanlineStride, imgc, bandOffsets, null);

        ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);
        boolean hasAlpha = false;
        boolean isAlphaPremultiplied = false;
        int transparency = Transparency.OPAQUE;
        int transferType = DataBuffer.TYPE_BYTE;
        ColorModel colorModel = new ComponentColorModel(colorSpace, hasAlpha, isAlphaPremultiplied, transparency, transferType);

        BufferedImage img = new BufferedImage(colorModel, raster, isAlphaPremultiplied, null);

        //Display image to the label
        ImageIcon icon = new ImageIcon(img);
        SrcImgLabel.setIcon(icon);
    }

    private void updateHSVMap() {
        if (getSelectedObjectType()==null) return;
        bica.HSVFilter hsvFilter = JmanagerView.root.getConnection().perceptionPrx.getHSVFilter(getSelectedCameraType(),
                                                                                               getSelectedObjectType());
        hSVFilterPanel21.setHSVFilter(hsvFilter);
    }

    /**
     * Helper method. Updates the HSV image of the image requested. The HSV image
     * is used to draw the pixel value in the HSV map and the histogram.
     */
    private void updateHSVImage() {

        // Get the image using ICE
        bica.ImageData data = null;
        try {
            double[] h = new double[imgh * imgw];
            double[] s = new double[imgh * imgw];
            double[] v = new double[imgh * imgw];
            
            data = JmanagerView.root.getConnection().perceptionPrx.getImageDataWithFeatures(FeaturesType.HSV);
            for (int i = 0; i < imgh; i++) {
                for (int j = 0; j < imgw; j++) {

                    double hc, sc, vc;
                    hc = ((double) data.pixelData[(i * imgw + j) * 3] + 128.0) * (360.0 / 255.0);
                    sc = ((double) data.pixelData[(i * imgw + j) * 3 + 1] + 128) / (255.0);
                    vc = ((double) data.pixelData[(i * imgw + j) * 3 + 2] + 128);

                    hc = (hc + 180.0) % 360.0;

                    int x1, y1;
                    x1 = j;
                    y1 = i;
                    hsvimage[(y1 * imgw + x1) * 3] = hc;
                    hsvimage[(y1 * imgw + x1) * 3 + 1] = sc;
                    hsvimage[(y1 * imgw + x1) * 3 + 2] = vc;
                    
                    h[y1 * imgw + x1] =  hc;
                    s[y1 * imgw + x1] =  sc;
                    v[y1 * imgw + x1] =  vc;
                    
                }
            }
            hSVFilterPanel21.setHistogram(h, s, v);
            
        } catch (bica.DataNotExistException ex) {
            Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (bica.HardwareFailedException ex) {
            Logger.getLogger(PerceptionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initHistogram() {
        for (byte b : masc) {
            b = 0;
        }
    }

    private void calculateHistogram() {
        initHistogram();
        double H, S, V, x, y;
        int X, Y;
        int SMAX = ccw;
        for (int i = 0; i
                < imgh; i++) {
            for (int j = 0; j
                    < imgw; j++) {
                V = hsvimage[(i * imgw + j) * 3 + 2];
                S = hsvimage[(i * imgw + j) * 3 + 1];
                H = hsvimage[(i * imgw + j) * 3];

                H = Math.toRadians(H);

                x = (S * Math.cos(-H - (Math.PI / 2.))); /* El rojo (H=0)está a la derecha */
                y = (S * Math.sin(-H - (Math.PI / 2.)));

                X = (int) ((x + 1.0) * SMAX / 2.0);
                Y = (int) ((1.0 - y) * SMAX / 2.0);

                if ((X * SMAX + Y) < 0) {
                    System.out.println("******* X: " + X + " Y: " + Y);
                }
                masc[X * SMAX + Y]++;
            }
        }
    }

    private void initHSVImage() {
        for (int i = 0; i
                < imgh; i++) {
            for (int j = 0; j
                    < imgw; j++) {
                hsvimage[(i * imgw + j) * 3 + 2] = 0;
                hsvimage[(i * imgw + j) * 3 + 1] = 0;
                hsvimage[(i * imgw + j) * 3] = 0;
            }
        }
    }

    private void drawHistogram() {
        int SMAX = ccw;
        for (int i = 0; i
                < SMAX * SMAX; i++) {
            /*
            if (masc[i] >= ThresholdSlider.getValue()) {
            circle[i * 3 + 0] = (byte) 255;
            circle[i * 3 + 1] = (byte) 255;
            circle[i * 3 + 2] = (byte) 255;
            }
             * 
             */
        }
    }


    /**
     * Helper method. Converts ObjectsType to FeaturesType. If there is no conversion,
     * return null.
     * @param objectsType ObjectsType to convert.
     * @return FeaturesType homolog.
     */
    private bica.FeaturesType ObjectsType2FeaturesType(bica.ObjectsType objectsType) {
        if (objectsType.equals(bica.ObjectsType.BallObj)) {
            return bica.FeaturesType.Ball;
        }

        if (objectsType.equals(bica.ObjectsType.BlueNetObj)) {
            return bica.FeaturesType.BlueNet;
        }

        if (objectsType.equals(bica.ObjectsType.YellowNetObj)) {
            return bica.FeaturesType.YellowNet;
        }

        if (objectsType.equals(bica.ObjectsType.FieldObj)) {
            return bica.FeaturesType.Field;
        }

        if (objectsType.equals(bica.ObjectsType.LinesObj)) {
            return bica.FeaturesType.Lines;
        }

        if (objectsType.equals(bica.ObjectsType.RedMarkerObj)) {
            return bica.FeaturesType.RedMarker;
        }

        if (objectsType.equals(bica.ObjectsType.BlueMarkerObj)) {
            return bica.FeaturesType.BlueMarker;
        }

        return null;
    }

    /**
     * Helper method. Converts FeaturesType to ObjectsType. If there is no conversion,
     * returns null.
     * @param featuresType FeaturesType to convert.
     * @return ObjectsType homolog.
     */
    private bica.ObjectsType featuresType2ObjectsType(bica.FeaturesType featuresType) {
        if (featuresType.equals(bica.FeaturesType.Ball)) {
            return bica.ObjectsType.BallObj;
        }

        if (featuresType.equals(bica.FeaturesType.BlueNet)) {
            return bica.ObjectsType.BlueNetObj;
        }

        if (featuresType.equals(bica.FeaturesType.YellowNet)) {
            return bica.ObjectsType.YellowNetObj;
        }

        if (featuresType.equals(bica.FeaturesType.RedMarker)) {
            return bica.ObjectsType.RedMarkerObj;
        }

        if (featuresType.equals(bica.FeaturesType.BlueMarker)) {
            return bica.ObjectsType.BlueMarkerObj;
        }

        if (featuresType.equals(bica.FeaturesType.Field)) {
            return bica.ObjectsType.FieldObj;
        }

        if (featuresType.equals(bica.FeaturesType.Lines)) {
            return bica.ObjectsType.LinesObj;
        }

        return null;
    }

    public void filterChanged(FilterChangedEvent evt) {
        if (getSelectedObjectType() == null) {
            return;
        }

        JmanagerView.root.getConnection().perceptionPrx.setHSVFilter(getSelectedCameraType(),
                    getSelectedObjectType(),
                    evt.getFilter());
    }

    /**
     * Gets selected camera type.
     * @return The selected camera type.
     */
    private bica.CameraType getSelectedCameraType() {
        return (bica.CameraType) CameraSelectorCB.getSelectedItem();
    }

    /**
     * Get selected feature type.
     * @return The selected feature type.
     */
    private bica.FeaturesType getSelectedFeatureType() {
        return (bica.FeaturesType) SelectObjectComboBox.getSelectedItem();
    }

    /**
     * Gets selected object type. Returns null if there is no object type.
     * @return The selected object type.
     */
    private bica.ObjectsType getSelectedObjectType() {
        return featuresType2ObjectsType(getSelectedFeatureType());
    }

    private static byte[] getBytesFromFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);

        // Get the size of the file
        long length = file.length();

        if (length > Integer.MAX_VALUE) {
            // File is too large
        }

        // Create the byte array to hold the data
        byte[] bytes = new byte[(int) length];

        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
                && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
            offset += numRead;
        }

        // Ensure all the bytes have been read in
        if (offset < bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }

        // Close the input stream and return bytes
        is.close();
        return bytes;
    }
}
