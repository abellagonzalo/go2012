/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AleatoryMove.java
 *
 * Created on 26-jul-2012, 16:24:02
 */
package jmanager.components;

import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import jmanager.JmanagerApp;
import jmanager.JmanagerView;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.Task;

/**
 *
 * @author gon
 */
public class AleatoryMove extends javax.swing.JPanel {

    /** Creates new form AleatoryMove */
    public AleatoryMove() {
        initComponents();
        createDataModel();
        addTableModelListeners();
        executeAction(getConfigurationFileAction());
        executeAction(refreshAction());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        movesListTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        confFilePathTextField = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        movesListTable.setModel(new DefaultTableModel());
        movesListTable.setName("movesListTable"); // NOI18N
        jScrollPane1.setViewportView(movesListTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(AleatoryMove.class, this);
        jButton1.setAction(actionMap.get("addAction")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jPanel1.add(jButton1);

        removeButton.setAction(actionMap.get("removeAction")); // NOI18N
        removeButton.setName("removeButton"); // NOI18N
        jPanel1.add(removeButton);

        jButton3.setAction(actionMap.get("refreshAction")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jPanel1.add(jButton3);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jPanel1.add(jSeparator1);

        jButton4.setAction(actionMap.get("executeAction")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jPanel1.add(jButton4);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setName("jPanel2"); // NOI18N

        confFilePathTextField.setName("confFilePathTextField"); // NOI18N
        jPanel2.add(confFilePathTextField);

        jButton5.setAction(actionMap.get("loadConfFileAction")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jPanel2.add(jButton5);

        jButton6.setAction(actionMap.get("saveConfFileAction")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N
        jPanel2.add(jButton6);

        add(jPanel2, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField confFilePathTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable movesListTable;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    private void createDataModel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Move");
        movesListTable.setModel(model);
    }

    private void addTableModelListeners() {
        // Disable removeButton when data change.
        movesListTable.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                removeButton.setEnabled(false);
            }
        });

        // Enable removeButton when user selects a row.
        movesListTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) return;
                if (movesListTable.getSelectedRow()==-1) return;
                removeButton.setEnabled(true);
            }
        });
    }

    private void executeAction(Task task) {
        Application.getInstance().getContext().getTaskService().execute(task);
    }

    public void showErrorDialog(String error) {
        JOptionPane.showMessageDialog(this,
                error,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    public void showMessageDialog(String message) {
        JOptionPane.showMessageDialog(this,
                message,
                "Info",
                JOptionPane.INFORMATION_MESSAGE);
    }

    public String showAskForMoveDialog() {
        return (String)JOptionPane.showInputDialog(this,
                                    "Introduce a move",
                                    "Add move",
                                    JOptionPane.QUESTION_MESSAGE);
    }

    public String getConfFilePath() {
        return confFilePathTextField.getText();
    }

    public void setMovesList(String[] moves) {
        DefaultTableModel model = (DefaultTableModel) movesListTable.getModel();
        while (model.getRowCount()>0) {
            model.removeRow(0);
        }

        for (String move : moves) {
            Vector<String> data = new Vector();
            data.add(move);
             model.addRow(data);
        }  
    }

    @Action
    public Task loadConfFileAction() {
        return new LoadConfFileTask(JmanagerApp.getApplication());
    }

    @Action
    public Task saveConfFileAction() {
        return new SaveConfFileTask(JmanagerApp.getApplication());
    }

    @Action
    public Task addAction() {
        String move = showAskForMoveDialog();
        return new AddTask(move, JmanagerApp.getApplication());
    }

    @Action
    public Task removeAction() {
        int row = movesListTable.getSelectedRow();
        int col = movesListTable.getSelectedColumn();
        String move = (String)movesListTable.getValueAt(row, col);
        return new RemoveTask(move, JmanagerApp.getApplication());
    }

    @Action
    public Task executeAction() {
        return new ExecuteTask(JmanagerApp.getApplication());
    }

    @Action
    public Task refreshAction() {
        return new RefreshTask(JmanagerApp.getApplication());
    }

    @Action
    public Task getConfigurationFileAction() {
        return new GetConfigurationFilePath(JmanagerApp.getApplication());
    }

    /**
     * Loads the configuration file of the component
     */
    private class LoadConfFileTask extends Task<Void, Void> {

        public LoadConfFileTask(Application app) {
            super(app);
        }

        @Override
        protected Void doInBackground() throws Exception {
            JmanagerView.root.getConnection().getAleatoryMovePrx().setConfFile(getConfFilePath());
            JmanagerView.root.getConnection().getAleatoryMovePrx().loadConfFile();          
            return null;
        }

        @Override
        protected void succeeded(Void v) {
            executeAction(refreshAction());
            showMessageDialog("Configuration file loaded correctly");
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog(cause.getLocalizedMessage());
        }
    }

    /**
     * Saves current configuration of the component.
     */
    private class SaveConfFileTask extends Task<Void, Void> {

        public SaveConfFileTask(Application app) {
            super(app);
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            JmanagerView.root.getConnection().getAleatoryMovePrx().saveConfFile();
            return null;
        }
    }

    /**
     * Adds new move to the list.
     */
    private class AddTask extends Task<Void, Void> {

        private String move;

        public AddTask(String move, Application app) {
            super(app);
            this.move = move;
        }

        @Override
        protected Void doInBackground() throws Exception {
            JmanagerView.root.getConnection().getAleatoryMovePrx().add(move);
            return null;
        }

        @Override
        protected void succeeded(Void v) {
            executeAction(refreshAction());
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog("Error adding move " + move + ".\n"
                    + cause.getLocalizedMessage());
        }
    }

    /**
     * Removes a move from the list.
     */
    private class RemoveTask extends Task<Void, Void> {

        private String move;

        public RemoveTask(String move, Application app) {
            super(app);
            this.move = move;
        }

        @Override
        protected Void doInBackground() throws Exception {
            JmanagerView.root.getConnection().getAleatoryMovePrx().remove(move);
            return null;
        }

        @Override
        protected void succeeded(Void v) {
            executeAction(refreshAction());
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog("Error removing move " + move + ".\n"
                    + cause.getLocalizedMessage());
        }
    }

    /**
     * Get current moves list.
     */
    private class RefreshTask extends Task<Void, Void> {

        public RefreshTask(Application app) {
            super(app);
        }

        @Override
        protected Void doInBackground() throws Exception {
            String[] moves = JmanagerView.root.getConnection().getAleatoryMovePrx().get();
            setMovesList(moves);
            return null;
        }

        @Override
        protected void succeeded(Void v) {
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog("Error refreshing list.\n"
                    + cause.getLocalizedMessage());
        }
    }

    /**
     * Execute random move from the list.
     */
    private class ExecuteTask extends Task<Void, Void> {

        public ExecuteTask(Application app) {
            super(app);
        }

        @Override
        protected Void doInBackground() throws Exception {
            JmanagerView.root.getConnection().getAleatoryMovePrx().execute();
            return null;
        }

        @Override
        protected void succeeded(Void v) {
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog("Error executing aleatory move.\n"
                    + cause.getLocalizedMessage());
        }
    }

    /**
     * Checks if move is available.
     */
    private class IsAvailableTask extends Task<Boolean, Void> {

        private String move;

        public IsAvailableTask(String move, Application app) {
            super(app);
            this.move = move;
        }
        
        @Override
        protected Boolean doInBackground() throws Exception {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    /**
     * Gets configuration file path
     */
    private class GetConfigurationFilePath extends Task<String, Void> {

        public GetConfigurationFilePath(Application app) {
            super(app);
        }

        @Override
        protected String doInBackground() throws Exception {
            return JmanagerView.root.getConnection().getAleatoryMovePrx().getConfFile();
        }

        @Override
        protected void succeeded(String s) {
            confFilePathTextField.setText(s);
        }

        @Override
        protected void failed(Throwable cause) {
            showErrorDialog("Failed returning configuration file path.\n"
                    + cause.getLocalizedMessage());
        }
    }
}
