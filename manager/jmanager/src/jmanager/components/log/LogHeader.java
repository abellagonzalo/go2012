package jmanager.components.log;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import jmanager.components.log.LogIO.LogDataType;

class LogLabel {

    public String label;
    public ArrayList<String> values;
}

class LogBody {

    public LogBody() {
        this.body = new ArrayList();
    }

    public void addLabels(ArrayList<String> labels) {
        for (int i = 0; i < labels.size(); i++) {
            // Add the new label
            LogLabel logLabel = new LogLabel();
            logLabel.label = labels.get(i);
            System.out.println("Registrando interÃ©s en etiqueta: " + logLabel.label);
            logLabel.values = new ArrayList();
            this.body.add(logLabel);
        }
    }

    public void addValue(String label, String value) {
        // Add the values if there is a label previously stored
        for (int i = 0; i < body.size(); i++) {
            if (this.body.get(i).label.equals(label)) {
                this.body.get(i).values.add(value);
                return;
            }
        }
    }

    public void clear() {
        for (int i = 0; i < body.size(); i++) {
            this.body.get(i).values.clear();
        }
        this.body.clear();
    }

    public void writeLog(String filename) {
        try {
            FileWriter writer = new FileWriter(filename);

            // Comment
            writer.write("# Log generated by SpiTeam jManager\n");
            writer.write("# Date: " + new Date().toString() + "\n");
            //writer.write("# Description: " + logHeader.getComment() + "\n\n");

            // Headers
            for (int i = 0; i < body.size(); i++) {
                writer.write("#" + this.body.get(i).label + "\t");
            }    
            writer.write("\n");


            // Body columns
            int row = 1;
            Boolean finished = false;
            while (!finished) {
                finished = true;
                for (int i = 0; i < this.body.size(); i++) {
                    if (this.body.get(i).values.size() >= row) {
                        writer.write(this.body.get(i).values.get(row - 1) + "\t");
                        //System.out.println("Escribiendo " + this.body.get(i).values.get(row - 1));
                        finished = false;
                    }
                }
                row++;
                writer.write("\n");
            }


            writer.close();
        } catch (IOException x) {
            System.err.format("IOException: %s%n", x);
        }
    }
    private ArrayList<LogLabel> body;
}

/**
 *
 * @author caguero
 */
class LogSubSubHeader {

    public String label;
    public LogDataType type;
    public int dataLength;
    public int numberOfValues;
}

class LogSubHeader {

    public String compName;
    public ArrayList<LogSubSubHeader> labels;
}

public class LogHeader {

    public LogHeader(String filename) {
        this._filename = filename;
        this.subHeaders = new ArrayList();
        this.filteredData = new LogBody();

        try {
            logIO = new LogIO(new DataInputStream(new BufferedInputStream(new FileInputStream(_filename))));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LogHeader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void readHeader() throws FileNotFoundException, IOException {
        // Comment length
        int commentL = logIO.readInt();

        // Comment               
        this.comment = logIO.readString(commentL);

        // NumHeaders             
        int numHeaders = logIO.readInt();
        this.subHeaders.ensureCapacity(numHeaders);

        for (int i = 0; i < numHeaders; i++) {
            LogSubHeader subHeader = new LogSubHeader();
            subHeader.labels = new ArrayList();

            int headerId = logIO.readInt();
            int compNameL = logIO.readInt();
            String compName = logIO.readString(compNameL);
            int numLabels = logIO.readInt();

            subHeader.compName = compName;

            for (int j = 0; j < numLabels; j++) {
                LogSubSubHeader ssHeader = new LogSubSubHeader();

                int labelL = logIO.readInt();
                String label = logIO.readString(labelL);
                LogDataType type = logIO.readDataType();
                int valueL = logIO.readShort();
                int nValues = logIO.readInt();

                ssHeader.label = label;
                ssHeader.type = type;
                ssHeader.dataLength = valueL;
                ssHeader.numberOfValues = nValues;
                subHeader.labels.add(ssHeader);
            }

            this.subHeaders.add(headerId, subHeader);
        }
    }

    public ArrayList<String> getLabels() {
        ArrayList<String> labels = new ArrayList();

        for (int i = 0; i < this.subHeaders.size(); i++) {
            labels.add("Time:" + this.subHeaders.get(i).compName);
            for (int j = 0; j < this.subHeaders.get(i).labels.size(); j++) {
                labels.add(this.subHeaders.get(i).compName + ":" + this.subHeaders.get(i).labels.get(j).label);
            }
        }
        return labels;
    }

    public void readFilteredBody(ArrayList<String> labels) {
        filteredData.clear();

        filteredData.addLabels(labels);

        Boolean finished = false;
        while (!finished) {
            try {
                // Fill with data from the log file
                int time = logIO.readInt();
                
                int headerId = logIO.readInt();
                System.out.println("headerId: " + headerId);

                filteredData.addValue("Time:" + this.subHeaders.get(headerId).compName, Integer.toString(time));

                int numLabels = this.subHeaders.get(headerId).labels.size();

                for (int i = 0; i < numLabels; i++) {
                    LogSubSubHeader ssHeader = this.subHeaders.get(headerId).labels.get(i);
                    LogDataType dataType = ssHeader.type;
                    int nValues = ssHeader.numberOfValues;
                    String label = ssHeader.label;

                    for (int j = 0; j < nValues; j++) {
                        switch (dataType) {
                            case LOG_BOOL:
                                //boolean v1 = logIO.readBool();
                                break;
                            case LOG_BYTE:
                                //byte v2 = logIO.readByte();
                                break;
                            case LOG_SHORT:
                                int v3 = logIO.readShort();
                                break;
                            case LOG_INT:
                                int v4 = logIO.readInt();
                                break;
                            case LOG_LONG:
                                long v5 = logIO.readLong();
                                break;
                            case LOG_FLOAT:
                                float v6 = logIO.readFloat();
                                break;
                            case LOG_DOUBLE:
                                double v7 = logIO.readDouble();
                                filteredData.addValue(this.subHeaders.get(headerId).compName + ":" + label, Double.toString(v7));
                                break;
                            case LOG_STRING:
                                int v8l = logIO.readInt();
                                String v8 = logIO.readString(v8l);
                                break;
                        }
                    }
                }
            } catch (IOException ex) {
                finished = true;
            }
        }
    }

    public void toDisk(String filename) {
        filteredData.writeLog(filename);
    }

    public String getComment() {
        return comment;
    }
    // Header
    private String comment;
    private ArrayList<LogSubHeader> subHeaders;
    private String _filename;
    private LogIO logIO;
    // Body
    private LogBody filteredData;
}
